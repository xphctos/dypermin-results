Public-API android.accounts.AccountManager String getPassword(android.accounts.Account) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager java.lang.String getUserData(android.accounts.Account, java.lang.String) -> AUTHENTICATE_ACCOUNTS
Private-API android.accounts.AccountManager AuthenticatorDescription[] getAuthenticatorTypesAsUser(int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.accounts.AccountManager Account[] getAccounts() -> GET_ACCOUNTS
Private-API android.accounts.AccountManager Account[] getAccountsAsUser(int) -> GET_ACCOUNTS
Public-API android.accounts.AccountManager java.lang.Account[] getAccountsByType(java.lang.String) -> GET_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture hasFeatures(android.accounts.Account, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler) -> GET_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler) -> GET_ACCOUNTS
Public-API android.accounts.AccountManager boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture renameAccount(android.accounts.Account, java.lang.String, android.accounts.AccountManagerCallback, android.os.Handler) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture removeAccount(android.accounts.Account, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture removeAccount(android.accounts.Account, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager boolean removeAccountExplicitly(android.accounts.Account) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager void invalidateAuthToken(java.lang.String, java.lang.String) -> MANAGE_ACCOUNTS, USE_CREDENTIALS
Public-API android.accounts.AccountManager java.lang.String peekAuthToken(android.accounts.Account, java.lang.String) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager void setPassword(android.accounts.Account, java.lang.String) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager void clearPassword(android.accounts.Account) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager void setUserData(android.accounts.Account, java.lang.String, java.lang.String) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String) -> AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager String blockingGetAuthToken(android.accounts.Account, java.lang.String, boolean) -> USE_CREDENTIALS
Public-API android.accounts.AccountManager AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) -> USE_CREDENTIALS
Public-API android.accounts.AccountManager AccountManagerFuture getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, boolean, android.accounts.AccountManagerCallback, android.os.Handler) -> USE_CREDENTIALS
Public-API android.accounts.AccountManager AccountManagerFuture addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture confirmCredentials(android.accounts.Account, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture updateCredentials(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture editProperties(java.lang.String, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager AccountManagerFuture getAuthTokenByFeatures(java.lang.String, java.lang.String, java.lang.String[], android.app.Activity, android.os.Bundle, android.os.Bundle, android.accounts.AccountManagerCallback, android.os.Handler) -> MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean) -> GET_ACCOUNTS
Public-API android.app.Activity void requestPermissions(java.lang.String[], int) -> READ_CONTACTS
Private-API android.app.ActivityManager java.util.List getRecentTasksForUser(int, int, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.app.ActivityManager void moveTaskToFront(int, int, android.os.Bundle) -> REORDER_TASKS
Public-API android.app.ActivityManager void killBackgroundProcesses(java.lang.String) -> KILL_BACKGROUND_PROCESSES
Private-API android.app.ActivityManager void killUid(int, java.lang.String) -> KILL_UID
Private-API android.app.ActivityManager void forceStopPackageAsUser(java.lang.String, int) -> FORCE_STOP_PACKAGES
Private-API android.app.ActivityManager java.lang.int handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.app.ActivityManager void dumpPackageState(java.io.FileDescriptor, java.lang.String) -> DUMP
Public-API android.app.AlarmManager void setTime(long) -> SET_TIME
Public-API android.app.DownloadManagerBaseTest void setWiFiStateOn(boolean) -> ACCESS_WIFI_STATE, CHANGE_WIFI_STATE
Public-API android.app.DownloadManagerBaseTest void setAirplaneModeOn(boolean) -> WRITE_SETTINGS
Public-API android.app.Fragment void requestPermissions(java.lang.String[], int) -> READ_CONTACTS
Public-API android.app.KeyguardManager$KeyguardLock void reenableKeyguard() -> DISABLE_KEYGUARD
Public-API android.app.KeyguardManager void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult) -> DISABLE_KEYGUARD
Public-API android.app.WallpaperManager void setResource(int) -> SET_WALLPAPER
Public-API android.app.WallpaperManager void setBitmap(android.graphics.Bitmap) -> SET_WALLPAPER
Public-API android.app.WallpaperManager void setStream(java.io.InputStream) -> SET_WALLPAPER
Public-API android.app.WallpaperManager void suggestDesiredDimensions(int, int) -> SET_WALLPAPER, SET_WALLPAPER_HINTS
Private-API android.app.WallpaperManager boolean setWallpaperComponent(android.content.ComponentName) -> SET_WALLPAPER, SET_WALLPAPER_COMPONENT
Public-API android.app.WallpaperManager void clear() -> SET_WALLPAPER
Private-API android.app.admin.DevicePolicyManager java.lang.boolean setDeviceOwner(java.lang.String, java.lang.String) -> MANAGE_PROFILE_AND_DEVICE_OWNERS
Private-API android.app.admin.DevicePolicyManager boolean setDeviceInitializer(android.content.ComponentName, android.content.ComponentName) -> MANAGE_DEVICE_ADMINS
Private-API android.app.admin.DevicePolicyManager java.lang.boolean setActiveProfileOwner(android.content.ComponentName, java.lang.String) -> MANAGE_USERS, MANAGE_DEVICE_ADMINS
Private-API android.app.admin.DevicePolicyManager boolean setProfileOwner(android.content.ComponentName, java.lang.String, int) -> MANAGE_PROFILE_AND_DEVICE_OWNERS
Private-API android.app.admin.DevicePolicyManager void notifyPendingSystemUpdate(long) -> NOTIFY_PENDING_SYSTEM_UPDATE
Public-API android.app.backup.BackupManager void dataChanged(java.lang.String) -> BACKUP
Private-API android.app.backup.BackupManager void setBackupEnabled(boolean) -> BACKUP
Private-API android.app.backup.BackupManager boolean isBackupEnabled() -> BACKUP
Private-API android.app.backup.BackupManager void setAutoRestore(boolean) -> BACKUP
Private-API android.app.backup.BackupManager String getCurrentTransport() -> BACKUP
Private-API android.app.backup.BackupManager String[] listAllTransports() -> BACKUP
Private-API android.app.backup.BackupManager java.lang.String selectBackupTransport(java.lang.String) -> BACKUP
Private-API android.app.backup.BackupManager void backupNow() -> BACKUP
Private-API android.app.backup.BackupManager java.lang.long getAvailableRestoreToken(java.lang.String) -> BACKUP
Private-API android.app.backup.RestoreSession int restoreAll(long, android.app.backup.RestoreObserver) -> BACKUP
Private-API android.app.backup.RestoreSession java.lang.int restoreSome(long, android.app.backup.RestoreObserver, java.lang.String[]) -> BACKUP
Private-API android.app.backup.RestoreSession int restorePackage(java.lang.String, android.app.backup.RestoreObserver) -> BACKUP
Private-API android.app.trust.TrustManager void reportUnlockAttempt(boolean, int) -> ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager void reportEnabledTrustAgentsChanged(int) -> ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager void reportRequireCredentialEntry(int) -> ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager void reportKeyguardShowingChanged() -> ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager void registerTrustListener(android.app.trust.TrustManager$TrustListener) -> TRUST_LISTENER
Private-API android.app.trust.TrustManager void unregisterTrustListener(android.app.trust.TrustManager$TrustListener) -> TRUST_LISTENER
Private-API android.app.trust.TrustManager boolean hasUserAuthenticatedSinceBoot(int) -> ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.usage.UsageStatsManager void whitelistAppTemporarily(java.lang.String, long, android.os.UserHandle) -> INTERACT_ACROSS_USERS, CHANGE_DEVICE_IDLE_TEMP_WHITELIST
Private-API android.appwidget.AppWidgetManager void bindAppWidgetId(int, android.content.ComponentName) -> BIND_APPWIDGET
Private-API android.appwidget.AppWidgetManager void bindAppWidgetId(int, android.content.ComponentName, android.os.Bundle) -> BIND_APPWIDGET
Public-API android.appwidget.AppWidgetManager boolean bindAppWidgetIdIfAllowed(int, android.content.ComponentName) -> BIND_APPWIDGET
Public-API android.appwidget.AppWidgetManager boolean bindAppWidgetIdIfAllowed(int, android.content.ComponentName, android.os.Bundle) -> BIND_APPWIDGET
Public-API android.appwidget.AppWidgetManager boolean bindAppWidgetIdIfAllowed(int, android.os.UserHandle, android.content.ComponentName, android.os.Bundle) -> BIND_APPWIDGET
Private-API android.appwidget.AppWidgetManager boolean hasBindAppWidgetPermission(java.lang.String, int) -> MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.appwidget.AppWidgetManager java.lang.boolean hasBindAppWidgetPermission(java.lang.String) -> MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.appwidget.AppWidgetManager void setBindAppWidgetPermission(java.lang.String, boolean) -> MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.appwidget.AppWidgetManager void setBindAppWidgetPermission(java.lang.String, int, boolean) -> MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.bluetooth.BluetoothA2dp boolean connect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dp boolean disconnect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dp boolean setPriority(android.bluetooth.BluetoothDevice, int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dp int getPriority(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothA2dp boolean isA2dpPlaying(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Private-API android.bluetooth.BluetoothA2dpSink boolean connect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dpSink boolean disconnect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dpSink BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean isEnabled() -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter int getState() -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter int getLeState() -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean enable() -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean disable() -> BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter boolean disable(boolean) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothAdapter String getAddress() -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter String getName() -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter boolean configHciSnoopLog(boolean) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothAdapter boolean factoryReset() -> BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothAdapter android.os.ParcelUuid[] getUuids() -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter java.lang.boolean setName(java.lang.String) -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter java.lang.int getScanMode() -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter boolean setScanMode(int, int) -> WRITE_SECURE_SETTINGS
Public-API android.bluetooth.BluetoothAdapter boolean startDiscovery() -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean cancelDiscovery() -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean isDiscovering() -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter java.util.Set getBondedDevices() -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter int getProfileConnectionState(int) -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter BluetoothServerSocket listenUsingRfcommOn(int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothAdapter BluetoothServerSocket listenUsingRfcommOn(int, boolean, boolean) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothAdapter BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String, java.util.UUID) -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String, java.util.UUID) -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String, java.util.UUID) -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter android.util.Pair readOutOfBandData() -> BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter boolean changeApplicationBluetoothState(boolean, android.bluetooth.BluetoothAdapter$BluetoothStateChangeCallback) -> BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter boolean startLeScan(java.util.UUID[], android.bluetooth.BluetoothAdapter$LeScanCallback) -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothDevice String getName() -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice int getType() -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice java.lang.boolean createBond() -> BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothDevice boolean createBond(int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice boolean createBondOutOfBand(byte[], byte[]) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice boolean setDeviceOutOfBandData(byte[], byte[]) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice boolean cancelBondProcess() -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice boolean removeBond() -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothDevice int getBondState() -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice boolean isConnected() -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice boolean isEncrypted() -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice BluetoothClass getBluetoothClass() -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice android.os.ParcelUuid[] getUuids() -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice boolean fetchUuidsWithSdp() -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice boolean setPin(byte[]) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothDevice boolean setPairingConfirmation(boolean) -> BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothDevice int getPhonebookAccessPermission() -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice boolean setPhonebookAccessPermission(int) -> BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothDevice int getMessageAccessPermission() -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice boolean setMessageAccessPermission(int) -> BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothDevice int getSimAccessPermission() -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice boolean setSimAccessPermission(int) -> BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothDevice BluetoothSocket createRfcommSocket(int) -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice BluetoothSocket createL2capSocket(int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID) -> BLUETOOTH
Public-API android.bluetooth.BluetoothDevice BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID) -> BLUETOOTH
Private-API android.bluetooth.BluetoothDevice BluetoothSocket createInsecureRfcommSocket(int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice BluetoothSocket createScoSocket() -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothGatt boolean registerApp(android.bluetooth.BluetoothGattCallback) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean connect(java.lang.Boolean, android.bluetooth.BluetoothGattCallback) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt void disconnect() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean discoverServices() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt java.util.List getServices() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt BluetoothGattService getService(java.util.UUID) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean beginReliableWrite() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean executeReliableWrite() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt void abortReliableWrite() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic, boolean) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean readRemoteRssi() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGatt boolean requestMtu(int) -> BLUETOOTH
Private-API android.bluetooth.BluetoothGattCharacteristic constructor BluetoothGattCharacteristic(java.util.UUID, int, int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattCharacteristic boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattDescriptor constructor BluetoothGattDescriptor(java.util.UUID, int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattDescriptor constructor BluetoothGattDescriptor(android.bluetooth.BluetoothGattCharacteristic, java.util.UUID, int, int) -> BLUETOOTH
Private-API android.bluetooth.BluetoothGattDescriptor int getInstanceId() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer boolean registerCallback(android.bluetooth.BluetoothGattServerCallback) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer boolean connect(android.bluetooth.BluetoothDevice, boolean) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer void cancelConnection(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer boolean sendResponse(android.bluetooth.BluetoothDevice, int, int, int, byte[]) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothGattCharacteristic, boolean) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer boolean addService(android.bluetooth.BluetoothGattService) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer boolean removeService(android.bluetooth.BluetoothGattService) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer void clearServices() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer java.util.List getServices() -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer BluetoothGattService getService(java.util.UUID) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattService constructor BluetoothGattService(java.util.UUID, int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattService boolean addService(android.bluetooth.BluetoothGattService) -> BLUETOOTH
Public-API android.bluetooth.BluetoothGattService boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic) -> BLUETOOTH
Private-API android.bluetooth.BluetoothHeadset boolean connect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothHeadset boolean disconnect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothHeadset boolean setPriority(android.bluetooth.BluetoothDevice, int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothHeadset int getPriority(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset boolean startVoiceRecognition(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset boolean isAudioConnected(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Private-API android.bluetooth.BluetoothHeadset boolean isAudioOn() -> BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset java.lang.boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice, java.lang.String, java.lang.String) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth boolean registerSinkAppConfiguration(java.lang.String, int, android.bluetooth.BluetoothHealthCallback) -> BLUETOOTH
Private-API android.bluetooth.BluetoothHealth boolean registerAppConfiguration(java.lang.String, int, int, int, android.bluetooth.BluetoothHealthCallback) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth boolean connectChannelToSource(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration) -> BLUETOOTH
Private-API android.bluetooth.BluetoothHealth boolean connectChannelToSink(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth boolean disconnectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth int getConnectionState(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth java.util.List getConnectedDevices() -> BLUETOOTH
Public-API android.bluetooth.BluetoothHealth java.util.List getDevicesMatchingConnectionStates(int[]) -> BLUETOOTH
Private-API android.bluetooth.BluetoothInputDevice boolean connect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice boolean disconnect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice boolean setPriority(android.bluetooth.BluetoothDevice, int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice int getPriority(android.bluetooth.BluetoothDevice) -> BLUETOOTH
Private-API android.bluetooth.BluetoothInputDevice boolean virtualUnplug(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice boolean getProtocolMode(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice boolean setProtocolMode(android.bluetooth.BluetoothDevice, int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice boolean getReport(android.bluetooth.BluetoothDevice, byte, byte, int) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice java.lang.boolean setReport(android.bluetooth.BluetoothDevice, byte, java.lang.String) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice java.lang.boolean sendData(android.bluetooth.BluetoothDevice, java.lang.String) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothManager int getConnectionState(android.bluetooth.BluetoothDevice, int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothManager java.util.List getConnectedDevices(int) -> BLUETOOTH
Public-API android.bluetooth.BluetoothManager java.util.List getDevicesMatchingConnectionStates(int, int[]) -> BLUETOOTH
Private-API android.bluetooth.BluetoothPan boolean connect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothPan boolean disconnect(android.bluetooth.BluetoothDevice) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeAdvertiser void startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeAdvertiser void startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeAdvertiser void stopAdvertising(android.bluetooth.le.AdvertiseCallback) -> BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeScanner void startScan(android.bluetooth.le.ScanCallback) -> BLUETOOTH_ADMIN, ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION, BLUETOOTH
Public-API android.bluetooth.le.BluetoothLeScanner void startScan(java.util.List, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback) -> BLUETOOTH_ADMIN, ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION, BLUETOOTH
Public-API android.bluetooth.le.BluetoothLeScanner void stopScan(android.bluetooth.le.ScanCallback) -> BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.content.ContentResolver java.lang.boolean getSyncAutomatically(android.accounts.Account, java.lang.String) -> READ_SYNC_SETTINGS
Public-API android.content.ContentResolver void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean) -> WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long) -> WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle) -> WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver void cancelSync(android.content.SyncRequest) -> WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver java.lang.List getPeriodicSyncs(android.accounts.Account, java.lang.String) -> READ_SYNC_SETTINGS
Public-API android.content.ContentResolver java.lang.int getIsSyncable(android.accounts.Account, java.lang.String) -> READ_SYNC_SETTINGS
Public-API android.content.ContentResolver void setIsSyncable(android.accounts.Account, java.lang.String, int) -> WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver boolean getMasterSyncAutomatically() -> READ_SYNC_SETTINGS
Public-API android.content.ContentResolver void setMasterSyncAutomatically(boolean) -> WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver java.lang.boolean isSyncActive(android.accounts.Account, java.lang.String) -> READ_SYNC_STATS
Public-API android.content.ContentResolver java.lang.SyncInfo getCurrentSync() -> READ_SYNC_STATS
Public-API android.content.ContentResolver java.lang.List getCurrentSyncs() -> READ_SYNC_STATS
Public-API android.content.ContentResolver java.lang.boolean isSyncPending(android.accounts.Account, java.lang.String) -> READ_SYNC_STATS
Public-API android.content.Context java.lang.File getExternalFilesDir(java.lang.String) -> READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Public-API android.content.Context java.lang.File getObbDir() -> READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Public-API android.content.Context java.lang.File getExternalCacheDir() -> READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Public-API android.content.Context void setWallpaper(android.graphics.Bitmap) -> SET_WALLPAPER
Public-API android.content.Context void setWallpaper(java.io.InputStream) -> SET_WALLPAPER
Public-API android.content.Context void clearWallpaper() -> SET_WALLPAPER
Private-API android.content.Context void startActivityAsUser(android.content.Intent, android.os.UserHandle) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.Context void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle) -> INTERACT_ACROSS_USERS
Public-API android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String) -> INTERACT_ACROSS_USERS
Private-API android.content.Context void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int) -> INTERACT_ACROSS_USERS
Public-API android.content.Context void sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) -> INTERACT_ACROSS_USERS
Public-API android.content.Context void sendStickyBroadcast(android.content.Intent) -> BROADCAST_STICKY
Public-API android.content.Context void removeStickyBroadcast(android.content.Intent) -> BROADCAST_STICKY
Public-API android.content.Context void sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle) -> INTERACT_ACROSS_USERS
Public-API android.content.Context void sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) -> INTERACT_ACROSS_USERS
Public-API android.content.Context void removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle) -> INTERACT_ACROSS_USERS, BROADCAST_STICKY
Private-API android.content.Context Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager java.util.List getInstalledPackages(int, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager void grantRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager void revokeRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager void installPackage(android.net.Uri, IPackageInstallObserver, int, java.lang.String) -> INSTALL_PACKAGES
Private-API android.content.pm.PackageManager void installPackage(android.net.Uri, android.app.PackageInstallObserver, int, java.lang.String) -> INSTALL_PACKAGES
Public-API android.content.pm.PackageManager void verifyPendingInstall(int, int) -> PACKAGE_VERIFICATION_AGENT
Public-API android.content.pm.PackageManager void extendVerificationTimeout(int, int, long) -> PACKAGE_VERIFICATION_AGENT
Private-API android.content.pm.PackageManager void verifyIntentFilter(int, int, java.util.List) -> INTENT_FILTER_VERIFICATION_AGENT
Private-API android.content.pm.PackageManager void deletePackage(java.lang.String, IPackageDeleteObserver, int) -> DELETE_PACKAGES
Private-API android.content.pm.PackageManager void deleteApplicationCacheFiles(java.lang.String, IPackageDataObserver) -> DELETE_CACHE_FILES
Private-API android.content.pm.PackageManager void getPackageSizeInfo(java.lang.String, int, IPackageStatsObserver) -> GET_PACKAGE_SIZE
Private-API android.content.pm.PackageManager void addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener) -> OBSERVE_GRANT_REVOKE_PERMISSIONS
Private-API android.content.pm.PackageManager void movePackage(java.lang.String, IPackageMoveObserver, int) -> MOVE_PACKAGE
Public-API android.hardware.camera2.CameraManager void openCamera(java.lang.String, android.hardware.camera2.CameraDevice, android.os.Handler) -> CAMERA
Private-API android.hardware.display.DisplayManager void startWifiDisplayScan() -> CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager void stopWifiDisplayScan() -> CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager void connectWifiDisplay(java.lang.String) -> CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager void renameWifiDisplay(java.lang.String, java.lang.String) -> CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager void forgetWifiDisplay(java.lang.String) -> CONFIGURE_WIFI_DISPLAY
Public-API android.hardware.display.VirtualDisplayTest void testPublicPresentationVirtualDisplay() -> SYSTEM_ALERT_WINDOW, CAPTURE_VIDEO_OUTPUT
Public-API android.hardware.display.VirtualDisplayTest void testSecurePublicPresentationVirtualDisplay() -> SYSTEM_ALERT_WINDOW, CAPTURE_SECURE_VIDEO_OUTPUT
Public-API android.hardware.fingerprint.FingerprintManager void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler) -> USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler, int) -> USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager void enroll(byte[], android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$EnrollmentCallback) -> MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager long preEnroll() -> MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager int postEnroll() -> MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager void remove(android.hardware.fingerprint.Fingerprint, android.hardware.fingerprint.FingerprintManager$RemovalCallback) -> MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager void rename(int, java.lang.String) -> MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager java.util.List getEnrolledFingerprints(int) -> USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager java.util.List getEnrolledFingerprints() -> USE_FINGERPRINT
Public-API android.hardware.fingerprint.FingerprintManager boolean hasEnrolledFingerprints() -> USE_FINGERPRINT
Public-API android.hardware.fingerprint.FingerprintManager boolean isHardwareDetected() -> USE_FINGERPRINT
Private-API android.hardware.input.InputManager void setTouchCalibration(java.lang.String, int, android.hardware.input.TouchCalibration) -> SET_INPUT_CALIBRATION
Private-API android.hardware.input.InputManager void setPointerSpeed(android.content.Context, int) -> WRITE_SETTINGS
Private-API android.hardware.input.InputManager void tryPointerSpeed(int) -> SET_POINTER_SPEED
Private-API android.hardware.input.InputManager boolean injectInputEvent(android.view.InputEvent, int) -> INJECT_EVENTS
Private-API android.hardware.location.GeofenceHardware int[] getMonitoringTypes() -> LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware boolean addGeofence(int, int, android.hardware.location.GeofenceHardwareRequest, android.hardware.location.GeofenceHardwareCallback) -> ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware boolean removeGeofence(int, int) -> ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware boolean pauseGeofence(int, int) -> ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware boolean resumeGeofence(int, int, int) -> ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware boolean registerForMonitorStateChangeCallback(int, android.hardware.location.GeofenceHardwareMonitorCallback) -> ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware boolean unregisterForMonitorStateChangeCallback(int, android.hardware.location.GeofenceHardwareMonitorCallback) -> ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Public-API android.location.LocationManager void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestSingleUpdate(java.lang.String, android.app.PendingIntent) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void addProximityAlert(double, double, float, long, android.app.PendingIntent) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Private-API android.location.LocationManager void addGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager void removeProximityAlert(android.app.PendingIntent) -> ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Private-API android.location.LocationManager void removeGeofence(android.location.Geofence, android.app.PendingIntent) -> ACCESS_FINE_LOCATION
Private-API android.location.LocationManager void removeAllGeofences(android.app.PendingIntent) -> ACCESS_FINE_LOCATION
Public-API android.location.LocationManager java.lang.Location getLastKnownLocation(java.lang.String) -> ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager boolean addGpsStatusListener(android.location.GpsStatus) -> ACCESS_FINE_LOCATION
Public-API android.location.LocationManager boolean addNmeaListener(android.location.GpsStatus) -> ACCESS_FINE_LOCATION
Private-API android.location.LocationRequest void setWorkSource(android.os.WorkSource) -> UPDATE_DEVICE_STATS
Private-API android.location.LocationRequest void setHideFromAppOps(boolean) -> UPDATE_APP_OPS_STATS
Private-API android.media.AsyncPlayer void setUsesWakeLock(android.content.Context) -> WAKE_LOCK
Public-API android.media.AudioManager void startBluetoothSco() -> MODIFY_AUDIO_SETTINGS
Private-API android.media.AudioManager void startBluetoothScoVirtualCall() -> MODIFY_AUDIO_SETTINGS
Public-API android.media.AudioManager void stopBluetoothSco() -> MODIFY_AUDIO_SETTINGS
Private-API android.media.AudioManager void registerRemoteControlDisplay(IRemoteControlDisplay) -> MEDIA_CONTENT_CONTROL
Private-API android.media.AudioManager void registerRemoteControlDisplay(IRemoteControlDisplay, int, int) -> MEDIA_CONTENT_CONTROL
Private-API android.media.AudioManager int registerAudioPolicy(android.media.audiopolicy.AudioPolicy) -> MODIFY_AUDIO_ROUTING
Public-API android.media.MediaPlayer void setWakeMode(android.content.Context, int) -> WAKE_LOCK
Public-API android.media.RingtoneManager android.database.Cursor getCursor() -> READ_EXTERNAL_STORAGE
Public-API android.media.RingtoneManager android.net.Uri getValidRingtoneUri(android.content.Context) -> READ_EXTERNAL_STORAGE
Private-API android.media.projection.MediaProjectionManager void addCallback(android.media.projection.MediaProjectionManager$Callback, android.os.Handler) -> MANAGE_MEDIA_PROJECTION
Private-API android.media.session.MediaSession constructor MediaSession(android.content.Context, java.lang.String, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.media.session.MediaSessionManager java.util.List getActiveSessions(android.content.ComponentName) -> MEDIA_CONTENT_CONTROL
Private-API android.media.session.MediaSessionManager java.util.List getActiveSessionsForUser(android.content.ComponentName, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.media.session.MediaSessionManager void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName) -> MEDIA_CONTENT_CONTROL
Public-API android.media.session.MediaSessionManager void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, android.os.Handler) -> MEDIA_CONTENT_CONTROL
Private-API android.media.session.MediaSessionManager void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, int, android.os.Handler) -> MEDIA_CONTENT_CONTROL
Public-API android.net.ConnectivityManager int getNetworkPreference() -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager NetworkInfo getActiveNetworkInfo() -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager Network getActiveNetwork() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager NetworkInfo getActiveNetworkInfoForUid(int) -> CONNECTIVITY_INTERNAL
Public-API android.net.ConnectivityManager NetworkInfo getNetworkInfo(int) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager NetworkInfo getNetworkInfo(android.net.Network) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager NetworkInfo[] getAllNetworkInfo() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager Network getNetworkForType(int) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager Network[] getAllNetworks() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager LinkProperties getActiveLinkProperties() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager LinkProperties getLinkProperties(int) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager LinkProperties getLinkProperties(android.net.Network) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager NetworkCapabilities getNetworkCapabilities(android.net.Network) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager java.lang.int startUsingNetworkFeature(int, java.lang.String) -> CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager java.lang.int stopUsingNetworkFeature(int, java.lang.String) -> CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager boolean requestRouteToHost(int, int) -> CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager boolean requestRouteToHostAddress(int, java.net.InetAddress) -> CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager void setBackgroundDataSetting(boolean) -> CHANGE_BACKGROUND_DATA_SETTING
Private-API android.net.ConnectivityManager NetworkQuotaInfo getActiveNetworkQuotaInfo() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager String[] getTetherableIfaces() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager String[] getTetheredIfaces() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager String[] getTetheringErroredIfaces() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.int tether(java.lang.String) -> CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.int untether(java.lang.String) -> CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.boolean isTetheringSupported() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.String[] getTetherableUsbRegexs() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.String[] getTetherableWifiRegexs() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.String[] getTetherableBluetoothRegexs() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager int setUsbTethering(boolean) -> CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager java.lang.int getLastTetherError(java.lang.String) -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager void reportInetCondition(int, int) -> STATUS_BAR
Private-API android.net.ConnectivityManager void setGlobalProxy(android.net.ProxyInfo) -> CONNECTIVITY_INTERNAL
Private-API android.net.ConnectivityManager boolean isNetworkSupported(int) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager boolean isActiveNetworkMetered() -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager void setAirplaneMode(boolean) -> CONNECTIVITY_INTERNAL
Public-API android.net.ConnectivityManager void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback) -> CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, int) -> CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager void requestNetwork(android.net.NetworkRequest, android.app.PendingIntent) -> CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback) -> ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager void registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent) -> ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager void setAcceptUnvalidated(android.net.Network, boolean, boolean) -> CONNECTIVITY_INTERNAL
Private-API android.net.NetworkScoreManager java.lang.boolean setActiveScorer(java.lang.String) -> SCORE_NETWORKS
Private-API android.net.NetworkScoreManager boolean requestScores(android.net.NetworkKey[]) -> BROADCAST_NETWORK_PRIVILEGED
Private-API android.net.NetworkScoreManager void registerNetworkScoreCache(int, INetworkScoreCache) -> BROADCAST_NETWORK_PRIVILEGED
Private-API android.net.NetworkScorerAppManager java.util.Collection getAllValidScorers(android.content.Context) -> SCORE_NETWORKS, BROADCAST_NETWORK_PRIVILEGED
Private-API android.net.TrafficStats void setThreadStatsUid(int) -> UPDATE_DEVICE_STATS
Private-API android.net.VpnService void prepareAndAuthorize(android.content.Context) -> CONTROL_VPN
Private-API android.net.dhcp.DhcpClient android.app.PendingIntent createStateMachineCommandIntent(java.lang.String, int) -> CONNECTIVITY_INTERNAL
Public-API android.net.sip.SipAudioCall void setSpeakerMode(boolean) -> MODIFY_AUDIO_SETTINGS
Public-API android.net.sip.SipAudioCall void startAudio() -> RECORD_AUDIO, ACCESS_WIFI_STATE, WAKE_LOCK
Public-API android.net.wifi.WifiManager java.util.List getScanResults() -> ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Public-API android.nfc.NfcAdapter void setBeamPushUris(android.net.Uri[], android.app.Activity) -> NFC
Public-API android.nfc.NfcAdapter void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback, android.app.Activity) -> NFC
Public-API android.nfc.NfcAdapter void setNdefPushMessage(android.nfc.NdefMessage, android.app.Activity, android.app.Activity) -> NFC
Public-API android.nfc.NfcAdapter void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback, android.app.Activity, android.app.Activity) -> NFC
Public-API android.nfc.NfcAdapter void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback, android.app.Activity, android.app.Activity) -> NFC
Public-API android.nfc.NfcAdapter void enableForegroundDispatch(android.app.Activity, android.app.PendingIntent, android.content.IntentFilter[], java.lang.String[][]) -> NFC
Public-API android.nfc.NfcAdapter void disableForegroundDispatch(android.app.Activity) -> NFC
Public-API android.nfc.NfcAdapter void enableForegroundNdefPush(android.app.Activity, android.nfc.NdefMessage) -> NFC
Public-API android.nfc.NfcAdapter void disableForegroundNdefPush(android.app.Activity) -> NFC
Private-API android.nfc.NfcAdapter void dispatch(android.nfc.Tag) -> NFC, WRITE_SECURE_SETTINGS
Public-API android.nfc.cardemulation.CardEmulation java.lang.boolean isDefaultServiceForCategory(android.content.ComponentName, java.lang.String) -> NFC
Public-API android.nfc.cardemulation.CardEmulation java.lang.boolean isDefaultServiceForAid(android.content.ComponentName, java.lang.String) -> NFC
Public-API android.nfc.tech.IsoDep void setTimeout(int) -> NFC
Public-API android.nfc.tech.IsoDep int getTimeout() -> NFC
Public-API android.nfc.tech.IsoDep byte[] transceive(byte[]) -> NFC
Public-API android.nfc.tech.MifareClassic boolean authenticateSectorWithKeyA(int, byte[]) -> NFC
Public-API android.nfc.tech.MifareClassic boolean authenticateSectorWithKeyB(int, byte[]) -> NFC
Public-API android.nfc.tech.MifareClassic byte[] readBlock(int) -> NFC
Public-API android.nfc.tech.MifareClassic void writeBlock(int, byte[]) -> NFC
Public-API android.nfc.tech.MifareClassic void increment(int, int) -> NFC
Public-API android.nfc.tech.MifareClassic void decrement(int, int) -> NFC
Public-API android.nfc.tech.MifareClassic void transfer(int) -> NFC
Public-API android.nfc.tech.MifareClassic void restore(int) -> NFC
Public-API android.nfc.tech.MifareClassic byte[] transceive(byte[]) -> NFC
Public-API android.nfc.tech.MifareClassic void setTimeout(int) -> NFC
Public-API android.nfc.tech.MifareClassic int getTimeout() -> NFC
Public-API android.nfc.tech.MifareUltralight byte[] readPages(int) -> NFC
Public-API android.nfc.tech.MifareUltralight void writePage(int, byte[]) -> NFC
Public-API android.nfc.tech.MifareUltralight byte[] transceive(byte[]) -> NFC
Public-API android.nfc.tech.MifareUltralight void setTimeout(int) -> NFC
Public-API android.nfc.tech.MifareUltralight int getTimeout() -> NFC
Public-API android.nfc.tech.Ndef boolean isWritable() -> NFC
Public-API android.nfc.tech.Ndef android.nfc.NdefMessage getNdefMessage() -> NFC
Public-API android.nfc.tech.Ndef void writeNdefMessage(android.nfc.NdefMessage) -> NFC
Public-API android.nfc.tech.Ndef boolean makeReadOnly() -> NFC
Public-API android.nfc.tech.NdefFormatable void format(android.nfc.NdefMessage) -> NFC
Public-API android.nfc.tech.NdefFormatable void formatReadOnly(android.nfc.NdefMessage) -> NFC
Public-API android.nfc.tech.NfcA byte[] transceive(byte[]) -> NFC
Public-API android.nfc.tech.NfcA void setTimeout(int) -> NFC
Public-API android.nfc.tech.NfcA int getTimeout() -> NFC
Public-API android.nfc.tech.NfcB byte[] transceive(byte[]) -> NFC
Public-API android.nfc.tech.NfcF byte[] transceive(byte[]) -> NFC
Public-API android.nfc.tech.NfcF void setTimeout(int) -> NFC
Public-API android.nfc.tech.NfcF int getTimeout() -> NFC
Public-API android.nfc.tech.NfcV byte[] transceive(byte[]) -> NFC
Public-API android.os.Debug java.lang.boolean dumpService(java.lang.String, java.io.FileDescriptor, java.lang.String[]) -> DUMP
Public-API android.os.DropBoxManager Entry getNextEntry(java.lang.String, long) -> READ_LOGS
Public-API android.os.Environment java.lang.File getExternalStorageDirectory() -> READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Private-API android.os.Environment java.io.File maybeTranslateEmulatedPathToInternal(java.io.File) -> WRITE_MEDIA_STORAGE
Public-API android.os.PowerManager java.lang.WakeLock newWakeLock(int, java.lang.String) -> WAKE_LOCK
Public-API android.os.PowerManager void userActivity(long, boolean) -> DEVICE_POWER
Private-API android.os.PowerManager void userActivity(long, int, int) -> DEVICE_POWER, USER_ACTIVITY
Public-API android.os.PowerManager void goToSleep(long) -> DEVICE_POWER
Private-API android.os.PowerManager void goToSleep(long, int, int) -> DEVICE_POWER
Public-API android.os.PowerManager void wakeUp(long) -> DEVICE_POWER
Private-API android.os.PowerManager void nap(long) -> DEVICE_POWER
Private-API android.os.PowerManager void boostScreenBrightness(long) -> DEVICE_POWER
Private-API android.os.PowerManager void setBacklightBrightness(int) -> DEVICE_POWER
Public-API android.os.PowerManager void reboot(java.lang.String) -> REBOOT
Public-API android.os.PowerManagerTest void doTestSetBacklightBrightness() -> DEVICE_POWER
Public-API android.os.RecoverySystem void installPackage(android.content.Context, java.io.File) -> REBOOT
Public-API android.os.RecoverySystem void rebootWipeUserData(android.content.Context) -> REBOOT
Private-API android.os.RecoverySystem void rebootWipeUserData(android.content.Context, boolean, java.lang.String) -> REBOOT
Public-API android.os.UserManager String getUserName() -> MANAGE_USERS
Private-API android.os.UserManager boolean isManagedProfile() -> MANAGE_USERS
Private-API android.os.UserManager android.content.pm.UserInfo getUserInfo(int) -> MANAGE_USERS
Public-API android.os.UserManager void setUserRestrictions(android.os.Bundle) -> MANAGE_USERS
Public-API android.os.UserManager void setUserRestrictions(android.os.Bundle, android.os.UserHandle) -> MANAGE_USERS
Public-API android.os.UserManager void setUserRestriction(java.lang.String, boolean) -> MANAGE_USERS
Private-API android.os.UserManager void setUserRestriction(java.lang.String, boolean, android.os.UserHandle) -> MANAGE_USERS
Private-API android.os.UserManager android.content.pm.UserInfo createUser(java.lang.String, int) -> MANAGE_USERS
Private-API android.os.UserManager android.content.pm.UserInfo createSecondaryUser(java.lang.String, int) -> MANAGE_USERS
Private-API android.os.UserManager android.content.pm.UserInfo createProfileForUser(java.lang.String, int, int) -> MANAGE_USERS
Private-API android.os.UserManager void setUserEnabled(int) -> MANAGE_USERS
Private-API android.os.UserManager java.util.List getUsers() -> MANAGE_USERS
Private-API android.os.UserManager boolean canAddMoreUsers() -> MANAGE_USERS
Private-API android.os.UserManager boolean canAddMoreManagedProfiles() -> MANAGE_USERS
Private-API android.os.UserManager java.util.List getProfiles(int) -> MANAGE_USERS
Private-API android.os.UserManager java.util.List getEnabledProfiles(int) -> MANAGE_USERS
Private-API android.os.UserManager java.util.List getUsers(boolean) -> MANAGE_USERS
Private-API android.os.UserManager boolean removeUser(int) -> MANAGE_USERS
Private-API android.os.UserManager void setUserName(int, java.lang.String) -> MANAGE_USERS
Public-API android.os.UserManager java.lang.boolean setRestrictionsChallenge(java.lang.String) -> MANAGE_USERS
Public-API android.os.Vibrator void vibrate(long) -> VIBRATE
Public-API android.os.Vibrator void vibrate(long, android.media.AudioAttributes) -> VIBRATE
Public-API android.os.Vibrator void vibrate(long[], int) -> VIBRATE
Public-API android.os.Vibrator void vibrate(long[], int, android.media.AudioAttributes) -> VIBRATE
Public-API android.os.Vibrator void cancel() -> VIBRATE
Private-API android.os.storage.VolumeInfo java.io.File getInternalPathForUser(int) -> WRITE_MEDIA_STORAGE
Public-API android.provider.Settings boolean canDrawOverlays(android.content.Context) -> SYSTEM_ALERT_WINDOW
Private-API android.provider.Settings boolean canChangeNetworkState(android.content.Context) -> WRITE_SETTINGS, CHANGE_NETWORK_STATE
Private-API android.provider.Settings boolean checkAndNoteWriteSettingsOperation(android.content.Context, int, java.lang.String, boolean) -> WRITE_SETTINGS, CHANGE_NETWORK_STATE
Private-API android.provider.Settings boolean isCallingPackageAllowedToChangeNetworkState(android.content.Context, int, java.lang.String, boolean) -> WRITE_SETTINGS, CHANGE_NETWORK_STATE
Private-API android.provider.Settings boolean checkAndNoteChangeNetworkStateOperation(android.content.Context, int, java.lang.String, boolean) -> WRITE_SETTINGS, CHANGE_NETWORK_STATE
Public-API android.service.carrier.CarrierService void notifyCarrierNetworkChange(boolean) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.support.v4.app.Fragment void requestPermissions(java.lang.String[], int) -> READ_CONTACTS
Public-API android.support.v4.content.ContextCompat java.io.File[] getObbDirs(android.content.Context) -> WRITE_EXTERNAL_STORAGE
Public-API android.support.v4.content.ContextCompat java.lang.File[] getExternalFilesDirs(android.content.Context, java.lang.String) -> WRITE_EXTERNAL_STORAGE
Public-API android.support.v4.content.ContextCompat java.io.File[] getExternalCacheDirs(android.content.Context) -> WRITE_EXTERNAL_STORAGE
Private-API android.telecom.TelecomManager java.lang.boolean setDefaultDialer(java.lang.String) -> MODIFY_PHONE_STATE, WRITE_SECURE_SETTINGS
Public-API android.telecom.TelecomManager boolean isInCall() -> READ_PHONE_STATE
Private-API android.telecom.TelecomManager int getCallState() -> READ_PHONE_STATE
Public-API android.telecom.TelecomManager void showInCallScreen(boolean) -> READ_PHONE_STATE
Public-API android.telecom.TelecomManager void placeCall(android.net.Uri, android.os.Bundle) -> CALL_PHONE
Public-API android.telephony.CarrierConfigManager android.os.PersistableBundle getConfigForSubId(int) -> READ_PHONE_STATE
Public-API android.telephony.CarrierConfigManager android.os.PersistableBundle getConfig() -> READ_PHONE_STATE
Public-API android.telephony.PhoneNumberUtils java.lang.boolean isVoiceMailNumber(java.lang.String) -> READ_PHONE_STATE
Private-API android.telephony.PhoneNumberUtils java.lang.boolean isVoiceMailNumber(int, java.lang.String) -> READ_PHONE_STATE
Private-API android.telephony.PhoneNumberUtils java.lang.boolean isVoiceMailNumber(android.content.Context, int, java.lang.String) -> READ_PHONE_STATE
Public-API android.telephony.PhoneStateListener void onCallStateChanged(int, java.lang.String) -> READ_PHONE_STATE
Private-API android.telephony.PhoneStateListener void onOtaspChanged(int) -> READ_PHONE_STATE
Private-API android.telephony.PhoneStateListener void onOemHookRawEvent(byte[]) -> READ_PRIVILEGED_PHONE_STATE
Public-API android.telephony.SmsManager void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent) -> SEND_SMS
Public-API android.telephony.SmsManager void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList) -> SEND_SMS
Public-API android.telephony.SmsManager void sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent) -> SEND_SMS
Public-API android.telephony.TelephonyManager String getDeviceSoftwareVersion() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getDeviceId() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getDeviceId(int) -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager CellLocation getCellLocation() -> ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Private-API android.telephony.TelephonyManager void enableLocationUpdates() -> CONTROL_LOCATION_UPDATES
Private-API android.telephony.TelephonyManager void disableLocationUpdates() -> CONTROL_LOCATION_UPDATES
Private-API android.telephony.TelephonyManager int getDataNetworkType() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager int getVoiceNetworkType() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getSimSerialNumber() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager int getLteOnCdmaMode() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getSubscriberId() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getGroupIdLevel1() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getLine1Number() -> READ_SMS, READ_PHONE_STATE
Private-API android.telephony.TelephonyManager java.lang.String getLine1AlphaTag() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager String getMsisdn() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getVoiceMailNumber() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager String getCompleteVoiceMailNumber() -> CALL_PRIVILEGED
Private-API android.telephony.TelephonyManager java.lang.int getVoiceMessageCount() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager String getVoiceMailAlphaTag() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager int getCdmaEriIconIndex() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager int getCdmaEriIconMode() -> READ_PHONE_STATE
Private-API android.telephony.TelephonyManager String getCdmaEriText() -> READ_PHONE_STATE
Public-API android.telephony.TelephonyManager java.util.List getAllCellInfo() -> ACCESS_COARSE_LOCATION
Public-API android.telephony.TelephonyManager java.lang.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager boolean iccCloseLogicalChannel(int) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager java.lang.String iccTransmitApduLogicalChannel(int, int, int, int, int, int, java.lang.String) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager java.lang.String iccTransmitApduBasicChannel(int, int, int, int, int, java.lang.String) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager java.lang.byte[] iccExchangeSimIO(int, int, int, int, int, java.lang.String) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager java.lang.String sendEnvelopeWithStatus(java.lang.String) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager String nvReadItem(int) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager java.lang.boolean nvWriteItem(int, java.lang.String) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager boolean nvWriteCdmaPrl(byte[]) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager boolean nvResetConfig(int) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager int getPreferredNetworkType(int) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager void setNetworkSelectionModeAutomatic(int) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager boolean setNetworkSelectionModeManual(int, com.android.internal.telephony.OperatorInfo) -> MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager boolean setPreferredNetworkType(int, int) -> MODIFY_PHONE_STATE, carrier privileges
Public-API android.view.inputmethod.InputMethodManager boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype) -> WRITE_SECURE_SETTINGS
Public-API android.webkit.WebSettings void setBlockNetworkLoads(boolean) -> INTERNET
Public-API android.webkit.WebSettings void setGeolocationEnabled(boolean) -> ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Public-API com.android.framework.permission.tests.SmsManagerPermissionTest void testSendTextMessage() -> SEND_SMS
Public-API com.android.framework.permission.tests.SmsManagerPermissionTest void testSendDataMessage() -> SEND_SMS
Public-API com.android.framework.permission.tests.VibratorServicePermissionTest void testVibrate() -> VIBRATE
Public-API com.android.framework.permission.tests.VibratorServicePermissionTest void testVibratePattern() -> VIBRATE
Public-API com.android.framework.permission.tests.VibratorServicePermissionTest void testCancelVibrate() -> VIBRATE
Public-API com.android.frameworks.downloadmanagertests.DownloadManagerBaseTest void setWiFiStateOn(boolean) -> ACCESS_WIFI_STATE, CHANGE_WIFI_STATE
Public-API com.android.frameworks.downloadmanagertests.DownloadManagerBaseTest void setAirplaneModeOn(boolean) -> WRITE_SETTINGS
Private-API com.android.internal.telephony.CallerInfo com.android.internal.telephony.CallerInfo markAsVoiceMail() -> READ_PHONE_STATE
Private-API com.android.internal.telephony.CarrierAppUtils java.util.List getDefaultCarrierAppCandidates(android.content.pm.IPackageManager, int) -> carrier privileges
Public-API com.android.internal.telephony.IccPhoneBookInterfaceManager java.lang.boolean updateAdnRecordsInEfBySearch(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) -> WRITE_CONTACTS
Public-API com.android.internal.telephony.IccPhoneBookInterfaceManager java.lang.boolean updateAdnRecordsInEfByIndex(int, java.lang.String, java.lang.String, int, java.lang.String) -> WRITE_CONTACTS
Public-API com.android.internal.telephony.IccPhoneBookInterfaceManager java.util.List getAdnRecordsInEf(int) -> READ_CONTACTS
Private-API com.android.internal.telephony.SmsApplication java.util.Collection getApplicationCollection(android.content.Context) -> SEND_RESPOND_VIA_MESSAGE, BROADCAST_SMS, BROADCAST_WAP_PUSH
Private-API com.android.internal.telephony.SmsApplication void assignWriteSmsPermissionToSystemApp(android.content.Context, android.content.pm.PackageManager, android.app.AppOpsManager, java.lang.String) -> WRITE_SMS
Public-API com.android.internal.telephony.SubscriptionController java.lang.boolean canReadPhoneState(java.lang.String, java.lang.String) -> READ_PHONE_STATE
Public-API com.android.location.provider.LocationProviderBase void reportLocation(android.location.Location) -> INSTALL_LOCATION_PROVIDER
Public-API com.android.nfc_extras.NfcAdapterExtras com.android.nfc_extras.NfcAdapterExtras get(android.nfc.NfcAdapter) -> WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras java.lang.CardEmulationRoute getCardEmulationRoute() -> NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras void setCardEmulationRoute(com.android.nfc_extras.NfcAdapterExtras$CardEmulationRoute) -> NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras NfcExecutionEnvironment getEmbeddedExecutionEnvironment() -> NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcExecutionEnvironment void open() -> NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcExecutionEnvironment void close() -> NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcExecutionEnvironment byte[] transceive(byte[]) -> NFC, WRITE_SECURE_SETTINGS
Private-API com.android.server.ConnectivityService boolean prepareVpn(java.lang.String, java.lang.String, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.ConnectivityService void setVpnPackageAuthorization(java.lang.String, int, boolean) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.audio.MediaFocusControl int checkRcdRegistrationAuthorization(android.content.ComponentName) -> MEDIA_CONTENT_CONTROL
Private-API com.android.server.content.ContentService void registerContentObserver(android.net.Uri, boolean, android.database.IContentObserver, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService void notifyChange(android.net.Uri, android.database.IContentObserver, boolean, boolean, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService void syncAsUser(android.content.SyncRequest, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService void cancelSyncAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService boolean getSyncAutomaticallyAsUser(android.accounts.Account, java.lang.String, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService int getIsSyncableAsUser(android.accounts.Account, java.lang.String, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService boolean getMasterSyncAutomaticallyAsUser(int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService java.util.List getCurrentSyncsAsUser(int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService void enforceCrossUserPermission(int, java.lang.String) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API com.android.server.devicepolicy.DevicePolicyManagerService void enforceCanSetProfileOwner(int) -> MANAGE_PROFILE_AND_DEVICE_OWNERS
Public-API com.android.server.devicepolicy.DevicePolicyManagerService void enforceCanSetDeviceOwner() -> MANAGE_PROFILE_AND_DEVICE_OWNERS
Public-API com.android.server.media.MediaSessionService void enforceMediaPermissions(android.content.ComponentName, int, int, int) -> MEDIA_CONTENT_CONTROL
Private-API com.android.server.pm.PackageManagerService void enforceCrossUserPermission(int, int, boolean, boolean, java.lang.String) -> INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API com.android.server.pm.UserManagerService void checkManageUsersPermission(java.lang.String) -> MANAGE_USERS
Private-API com.android.server.wifi.WifiServiceImpl boolean checkCallerCanAccessScanResults(java.lang.String, int) -> ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Private-API com.android.server.wifi.WifiServiceImpl boolean checkCallerCanAccessScanResults(java.lang.String, int) -> ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Private-API com.android.systemui.media.NotificationPlayer void setUsesWakeLock(android.content.Context) -> WAKE_LOCK
