Public-API android.webkit.WebSettings.setBlockNetworkLoads(boolean) : INTERNET
Public-API android.webkit.WebSettings.setGeolocationEnabled(boolean) : ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Public-API android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler) : USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager$AuthenticationCallback, android.os.Handler, int) : USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.enroll(byte[], android.os.CancellationSignal, int, int, android.hardware.fingerprint.FingerprintManager$EnrollmentCallback) : MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.preEnroll() : MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.postEnroll() : MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.setActiveUser(int) : MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.remove(android.hardware.fingerprint.Fingerprint, int, android.hardware.fingerprint.FingerprintManager$RemovalCallback) : MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.rename(int, int, java.lang.String) : MANAGE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints(int) : USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.getEnrolledFingerprints() : USE_FINGERPRINT
Public-API android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints() : USE_FINGERPRINT
Private-API android.hardware.fingerprint.FingerprintManager.hasEnrolledFingerprints(int) : USE_FINGERPRINT, INTERACT_ACROSS_USERS
Public-API android.hardware.fingerprint.FingerprintManager.isHardwareDetected() : USE_FINGERPRINT
Private-API android.hardware.input.InputManager.setTouchCalibration(java.lang.String, int, android.hardware.input.TouchCalibration) : SET_INPUT_CALIBRATION
Private-API android.hardware.input.InputManager.setPointerSpeed(android.content.Context, int) : WRITE_SETTINGS
Private-API android.hardware.input.InputManager.tryPointerSpeed(int) : SET_POINTER_SPEED
Private-API android.hardware.input.InputManager.injectInputEvent(android.view.InputEvent, int) : INJECT_EVENTS
Private-API android.hardware.location.GeofenceHardware.getMonitoringTypes() : LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware.addGeofence(int, int, android.hardware.location.GeofenceHardwareRequest, android.hardware.location.GeofenceHardwareCallback) : ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware.removeGeofence(int, int) : ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware.pauseGeofence(int, int) : ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware.resumeGeofence(int, int, int) : ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware.registerForMonitorStateChangeCallback(int, android.hardware.location.GeofenceHardwareMonitorCallback) : ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.location.GeofenceHardware.unregisterForMonitorStateChangeCallback(int, android.hardware.location.GeofenceHardwareMonitorCallback) : ACCESS_FINE_LOCATION, LOCATION_HARDWARE
Private-API android.hardware.display.DisplayManager.startWifiDisplayScan() : CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager.stopWifiDisplayScan() : CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager.connectWifiDisplay(java.lang.String) : CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager.renameWifiDisplay(java.lang.String, java.lang.String) : CONFIGURE_WIFI_DISPLAY
Private-API android.hardware.display.DisplayManager.forgetWifiDisplay(java.lang.String) : CONFIGURE_WIFI_DISPLAY
Public-API android.hardware.camera2.CameraManager.openCamera(java.lang.String, android.hardware.camera2.CameraDevice, android.os.Handler) : CAMERA
Public-API android.net.ConnectivityManager.getNetworkPreference() : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getActiveNetworkInfo() : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getActiveNetwork() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getActiveNetworkForUid(int) : CONNECTIVITY_INTERNAL
Private-API android.net.ConnectivityManager.setAlwaysOnVpnPackageForUser(int, java.lang.String, boolean) : BIND_VPN_SERVICE
Private-API android.net.ConnectivityManager.getActiveNetworkInfoForUid(int) : CONNECTIVITY_INTERNAL
Public-API android.net.ConnectivityManager.getNetworkInfo(int) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getNetworkInfo(android.net.Network) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getAllNetworkInfo() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getNetworkForType(int) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getAllNetworks() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getActiveLinkProperties() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getLinkProperties(int) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getLinkProperties(android.net.Network) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.getNetworkCapabilities(android.net.Network) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.startUsingNetworkFeature(int, java.lang.String) : CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager.stopUsingNetworkFeature(int, java.lang.String) : CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager.requestRouteToHost(int, int) : CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager.requestRouteToHostAddress(int, java.net.InetAddress) : CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager.setBackgroundDataSetting(boolean) : CHANGE_BACKGROUND_DATA_SETTING
Private-API android.net.ConnectivityManager.getActiveNetworkQuotaInfo() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getTetherableIfaces() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getTetheredIfaces() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getTetheringErroredIfaces() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.tether(java.lang.String) : CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager.untether(java.lang.String) : CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager.isTetheringSupported() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getTetherableUsbRegexs() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getTetherableWifiRegexs() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.getTetherableBluetoothRegexs() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.setUsbTethering(boolean) : CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager.getLastTetherError(java.lang.String) : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.reportInetCondition(int, int) : STATUS_BAR
Private-API android.net.ConnectivityManager.setGlobalProxy(android.net.ProxyInfo) : CONNECTIVITY_INTERNAL
Private-API android.net.ConnectivityManager.isNetworkSupported(int) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.isActiveNetworkMetered() : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.setAirplaneMode(boolean) : CONNECTIVITY_INTERNAL
Public-API android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback) : CHANGE_NETWORK_STATE
Private-API android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, int) : CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager.requestNetwork(android.net.NetworkRequest, android.app.PendingIntent) : CHANGE_NETWORK_STATE
Public-API android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent) : ACCESS_NETWORK_STATE
Public-API android.net.ConnectivityManager.registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback) : ACCESS_NETWORK_STATE
Private-API android.net.ConnectivityManager.setAcceptUnvalidated(android.net.Network, boolean, boolean) : CONNECTIVITY_INTERNAL
Private-API android.net.VpnService.prepareAndAuthorize(android.content.Context) : CONTROL_VPN
Private-API android.net.NetworkScoreManager.setActiveScorer(java.lang.String) : SCORE_NETWORKS
Private-API android.net.NetworkScoreManager.requestScores(android.net.NetworkKey[]) : BROADCAST_NETWORK_PRIVILEGED
Private-API android.net.NetworkScoreManager.registerNetworkScoreCache(int, INetworkScoreCache) : BROADCAST_NETWORK_PRIVILEGED
Private-API android.net.NetworkScorerAppManager.getAllValidScorers(android.content.Context) : SCORE_NETWORKS, BROADCAST_NETWORK_PRIVILEGED
Private-API android.net.TrafficStats.setThreadStatsUid(int) : UPDATE_DEVICE_STATS
Public-API android.net.wifi.WifiManager.getScanResults() : ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Public-API android.net.sip.SipAudioCall.setSpeakerMode(boolean) : MODIFY_AUDIO_SETTINGS
Public-API android.net.sip.SipAudioCall.startAudio() : RECORD_AUDIO, ACCESS_WIFI_STATE, WAKE_LOCK
Private-API android.app.ActivityManager.getRecentTasksForUser(int, int, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.app.ActivityManager.moveTaskToFront(int, int, android.os.Bundle) : REORDER_TASKS
Public-API android.app.ActivityManager.killBackgroundProcesses(java.lang.String) : KILL_BACKGROUND_PROCESSES
Private-API android.app.ActivityManager.killUid(int, java.lang.String) : KILL_UID
Private-API android.app.ActivityManager.forceStopPackageAsUser(java.lang.String, int) : FORCE_STOP_PACKAGES
Private-API android.app.ActivityManager.handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.app.ActivityManager.dumpPackageState(java.io.FileDescriptor, java.lang.String) : DUMP
Public-API android.app.KeyguardManager$KeyguardLock.reenableKeyguard() : DISABLE_KEYGUARD
Public-API android.app.KeyguardManager.exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult) : DISABLE_KEYGUARD
Private-API android.app.WallpaperManager.getWallpaperFile(int, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.app.WallpaperManager.setResource(int) : SET_WALLPAPER
Public-API android.app.WallpaperManager.setBitmap(android.graphics.Bitmap) : SET_WALLPAPER
Public-API android.app.WallpaperManager.setBitmap(android.graphics.Bitmap, android.graphics.Rect, boolean) : SET_WALLPAPER
Public-API android.app.WallpaperManager.setStream(java.io.InputStream) : SET_WALLPAPER
Public-API android.app.WallpaperManager.setStream(java.io.InputStream, android.graphics.Rect, boolean) : SET_WALLPAPER
Public-API android.app.WallpaperManager.suggestDesiredDimensions(int, int) : SET_WALLPAPER, SET_WALLPAPER_HINTS
Private-API android.app.WallpaperManager.clearWallpaper(int, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.app.WallpaperManager.setWallpaperComponent(android.content.ComponentName) : SET_WALLPAPER, SET_WALLPAPER_COMPONENT
Public-API android.app.WallpaperManager.clear() : SET_WALLPAPER
Public-API android.app.AlarmManager.setTime(long) : SET_TIME
Public-API android.app.Fragment.requestPermissions(java.lang.String[], int) : READ_CONTACTS
Public-API android.app.admin.DevicePolicyManager.setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean) : BIND_VPN_SERVICE
Private-API android.app.admin.DevicePolicyManager.setDeviceOwner(android.content.ComponentName, java.lang.String, int) : MANAGE_PROFILE_AND_DEVICE_OWNERS
Private-API android.app.admin.DevicePolicyManager.isDeviceOwnerAppOnAnyUser(java.lang.String) : MANAGE_USERS
Private-API android.app.admin.DevicePolicyManager.getDeviceOwnerComponentOnAnyUser() : MANAGE_USERS
Private-API android.app.admin.DevicePolicyManager.getDeviceOwnerUserId() : MANAGE_USERS
Private-API android.app.admin.DevicePolicyManager.isDeviceManaged() : MANAGE_USERS
Private-API android.app.admin.DevicePolicyManager.getDeviceOwnerNameOnAnyUser() : MANAGE_USERS
Private-API android.app.admin.DevicePolicyManager.setActiveProfileOwner(android.content.ComponentName, java.lang.String) : MANAGE_USERS, MANAGE_DEVICE_ADMINS
Private-API android.app.admin.DevicePolicyManager.setProfileOwner(android.content.ComponentName, java.lang.String, int) : MANAGE_PROFILE_AND_DEVICE_OWNERS
Private-API android.app.admin.DevicePolicyManager.notifyPendingSystemUpdate(long) : NOTIFY_PENDING_SYSTEM_UPDATE
Private-API android.app.admin.DevicePolicyManager.setOrganizationColorForUser(int, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL, MANAGE_USERS
Private-API android.app.usage.UsageStatsManager.whitelistAppTemporarily(java.lang.String, long, android.os.UserHandle) : INTERACT_ACROSS_USERS, CHANGE_DEVICE_IDLE_TEMP_WHITELIST
Private-API android.app.trust.TrustManager.setDeviceLockedForUser(int, boolean) : ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager.reportUnlockAttempt(boolean, int) : ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager.reportEnabledTrustAgentsChanged(int) : ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager.reportKeyguardShowingChanged() : ACCESS_KEYGUARD_SECURE_STORAGE
Private-API android.app.trust.TrustManager.registerTrustListener(android.app.trust.TrustManager$TrustListener) : TRUST_LISTENER
Private-API android.app.trust.TrustManager.unregisterTrustListener(android.app.trust.TrustManager$TrustListener) : TRUST_LISTENER
Private-API android.app.trust.TrustManager.isTrustUsuallyManaged(int) : TRUST_LISTENER
Public-API android.app.backup.BackupManager.dataChanged(java.lang.String) : BACKUP
Private-API android.app.backup.BackupManager.setBackupEnabled(boolean) : BACKUP
Private-API android.app.backup.BackupManager.isBackupEnabled() : BACKUP
Private-API android.app.backup.BackupManager.setAutoRestore(boolean) : BACKUP
Private-API android.app.backup.BackupManager.getCurrentTransport() : BACKUP
Private-API android.app.backup.BackupManager.listAllTransports() : BACKUP
Private-API android.app.backup.BackupManager.selectBackupTransport(java.lang.String) : BACKUP
Private-API android.app.backup.BackupManager.backupNow() : BACKUP
Private-API android.app.backup.BackupManager.getAvailableRestoreToken(java.lang.String) : BACKUP
Private-API android.app.backup.BackupManager.isAppEligibleForBackup(java.lang.String) : BACKUP
Private-API android.app.backup.RestoreSession.restoreAll(long, android.app.backup.RestoreObserver) : BACKUP
Private-API android.app.backup.RestoreSession.restoreSome(long, android.app.backup.RestoreObserver, java.lang.String[]) : BACKUP
Private-API android.app.backup.RestoreSession.restorePackage(java.lang.String, android.app.backup.RestoreObserver) : BACKUP
Public-API android.location.LocationManager.requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestLocationUpdates(java.lang.String, long, float, android.location.LocationListener, android.os.Looper) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestLocationUpdates(long, float, android.location.Criteria, android.location.LocationListener, android.os.Looper) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestLocationUpdates(java.lang.String, long, float, android.app.PendingIntent) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestLocationUpdates(long, float, android.location.Criteria, android.app.PendingIntent) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestSingleUpdate(java.lang.String, android.location.LocationListener, android.os.Looper) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestSingleUpdate(android.location.Criteria, android.location.LocationListener, android.os.Looper) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestSingleUpdate(java.lang.String, android.app.PendingIntent) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.requestSingleUpdate(android.location.Criteria, android.app.PendingIntent) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addProximityAlert(double, double, float, long, android.app.PendingIntent) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Private-API android.location.LocationManager.addGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.removeProximityAlert(android.app.PendingIntent) : ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Private-API android.location.LocationManager.removeGeofence(android.location.Geofence, android.app.PendingIntent) : ACCESS_FINE_LOCATION
Private-API android.location.LocationManager.removeAllGeofences(android.app.PendingIntent) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.getLastKnownLocation(java.lang.String) : ACCESS_COARSE_LOCATION, ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addGpsStatusListener(android.location.GpsStatus) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatusCallback, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssStatusCallback(android.location.GnssStatus, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addNmeaListener(android.location.GpsStatus) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addNmeaListener(android.location.GnssNmeaListener, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.addNmeaListener(android.location.OnNmeaMessageListener, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessageEvent, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage, android.os.Handler) : ACCESS_FINE_LOCATION
Public-API android.location.LocationManager.getGpsStatus(android.location.GpsStatus) : ACCESS_FINE_LOCATION
Private-API android.location.LocationRequest.setWorkSource(android.os.WorkSource) : UPDATE_DEVICE_STATS
Private-API android.location.LocationRequest.setHideFromAppOps(boolean) : UPDATE_APP_OPS_STATS
Public-API android.provider.Settings.canDrawOverlays(android.content.Context) : SYSTEM_ALERT_WINDOW
Private-API android.provider.Settings.checkAndNoteWriteSettingsOperation(android.content.Context, int, java.lang.String, boolean) : WRITE_SETTINGS
Private-API android.provider.Settings.checkAndNoteChangeNetworkStateOperation(android.content.Context, int, java.lang.String, boolean) : WRITE_SETTINGS, CHANGE_NETWORK_STATE
Public-API android.content.ContentResolver.getSyncAutomatically(android.accounts.Account, java.lang.String) : READ_SYNC_SETTINGS
Public-API android.content.ContentResolver.setSyncAutomatically(android.accounts.Account, java.lang.String, boolean) : WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver.addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long) : WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver.removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle) : WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver.cancelSync(android.content.SyncRequest) : WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver.getPeriodicSyncs(android.accounts.Account, java.lang.String) : READ_SYNC_SETTINGS
Public-API android.content.ContentResolver.getIsSyncable(android.accounts.Account, java.lang.String) : READ_SYNC_SETTINGS
Public-API android.content.ContentResolver.setIsSyncable(android.accounts.Account, java.lang.String, int) : WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver.getMasterSyncAutomatically() : READ_SYNC_SETTINGS
Public-API android.content.ContentResolver.setMasterSyncAutomatically(boolean) : WRITE_SYNC_SETTINGS
Public-API android.content.ContentResolver.isSyncActive(android.accounts.Account, java.lang.String) : READ_SYNC_STATS
Public-API android.content.ContentResolver.getCurrentSync() : READ_SYNC_STATS
Public-API android.content.ContentResolver.getCurrentSyncs() : READ_SYNC_STATS
Public-API android.content.ContentResolver.isSyncPending(android.accounts.Account, java.lang.String) : READ_SYNC_STATS
Public-API android.content.Context.getExternalFilesDir(java.lang.String) : READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.getExternalFilesDirs(java.lang.String) : WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.getObbDir() : READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.getObbDirs() : WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.getExternalCacheDir() : READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.getExternalCacheDirs() : WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.getExternalMediaDirs() : WRITE_EXTERNAL_STORAGE
Public-API android.content.Context.setWallpaper(android.graphics.Bitmap) : SET_WALLPAPER
Public-API android.content.Context.setWallpaper(java.io.InputStream) : SET_WALLPAPER
Public-API android.content.Context.clearWallpaper() : SET_WALLPAPER
Private-API android.content.Context.startActivityAsUser(android.content.Intent, android.os.UserHandle) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.Context.startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.content.Context.sendBroadcastAsUser(android.content.Intent, android.os.UserHandle) : INTERACT_ACROSS_USERS
Public-API android.content.Context.sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String) : INTERACT_ACROSS_USERS
Private-API android.content.Context.sendBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, int) : INTERACT_ACROSS_USERS
Public-API android.content.Context.sendOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) : INTERACT_ACROSS_USERS
Public-API android.content.Context.sendStickyBroadcast(android.content.Intent) : BROADCAST_STICKY
Public-API android.content.Context.removeStickyBroadcast(android.content.Intent) : BROADCAST_STICKY
Public-API android.content.Context.sendStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle) : INTERACT_ACROSS_USERS
Public-API android.content.Context.sendStickyOrderedBroadcastAsUser(android.content.Intent, android.os.UserHandle, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) : INTERACT_ACROSS_USERS
Public-API android.content.Context.removeStickyBroadcastAsUser(android.content.Intent, android.os.UserHandle) : INTERACT_ACROSS_USERS, BROADCAST_STICKY
Private-API android.content.Context.registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.SyncInfo.createAccountRedacted(int, java.lang.String, long) : GET_ACCOUNTS
Private-API android.content.pm.PackageManager.getPackageInfoAsUser(java.lang.String, int, int) : INTERACT_ACROSS_USERS
Private-API android.content.pm.PackageManager.getInstalledPackagesAsUser(int, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager.grantRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager.revokeRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager.getEphemeralApplications() : ACCESS_EPHEMERAL_APPS
Private-API android.content.pm.PackageManager.installExistingPackageAsUser(java.lang.String, int) : INSTALL_PACKAGES, INTERACT_ACROSS_USERS_FULL
Public-API android.content.pm.PackageManager.verifyPendingInstall(int, int) : PACKAGE_VERIFICATION_AGENT
Public-API android.content.pm.PackageManager.extendVerificationTimeout(int, int, long) : PACKAGE_VERIFICATION_AGENT
Private-API android.content.pm.PackageManager.verifyIntentFilter(int, int, java.util.List) : INTENT_FILTER_VERIFICATION_AGENT
Private-API android.content.pm.PackageManager.deletePackage(java.lang.String, IPackageDeleteObserver, int) : DELETE_PACKAGES
Private-API android.content.pm.PackageManager.deletePackageAsUser(java.lang.String, IPackageDeleteObserver, int, int) : DELETE_PACKAGES, INTERACT_ACROSS_USERS_FULL
Private-API android.content.pm.PackageManager.deleteApplicationCacheFiles(java.lang.String, IPackageDataObserver) : DELETE_CACHE_FILES
Private-API android.content.pm.PackageManager.deleteApplicationCacheFilesAsUser(java.lang.String, int, IPackageDataObserver) : INTERACT_ACROSS_USERS, DELETE_CACHE_FILES
Private-API android.content.pm.PackageManager.getPackageSizeInfoAsUser(java.lang.String, int, IPackageStatsObserver) : GET_PACKAGE_SIZE
Private-API android.content.pm.PackageManager.addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener) : OBSERVE_GRANT_REVOKE_PERMISSIONS
Public-API android.telephony.PhoneStateListener.onCallStateChanged(int, java.lang.String) : READ_PHONE_STATE
Private-API android.telephony.PhoneStateListener.onOtaspChanged(int) : READ_PHONE_STATE
Private-API android.telephony.PhoneStateListener.onOemHookRawEvent(byte[]) : READ_PRIVILEGED_PHONE_STATE
Public-API android.telephony.SmsManager.sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent) : SEND_SMS
Public-API android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList) : SEND_SMS
Public-API android.telephony.SmsManager.sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent) : SEND_SMS
Public-API android.telephony.PhoneNumberUtils.isVoiceMailNumber(java.lang.String) : READ_PHONE_STATE
Private-API android.telephony.PhoneNumberUtils.isVoiceMailNumber(int, java.lang.String) : READ_PHONE_STATE
Private-API android.telephony.PhoneNumberUtils.isVoiceMailNumber(android.content.Context, int, java.lang.String) : READ_PHONE_STATE
Public-API android.telephony.CarrierConfigManager.getConfigForSubId(int) : READ_PHONE_STATE
Public-API android.telephony.CarrierConfigManager.getConfig() : READ_PHONE_STATE
Private-API android.telephony.SubscriptionManager.setSimProvisioningStatus(int, int) : MODIFY_PHONE_STATE
Public-API android.telephony.TelephonyManager.getDeviceSoftwareVersion() : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getDeviceId() : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getDeviceId(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getCellLocation() : ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Private-API android.telephony.TelephonyManager.enableLocationUpdates() : CONTROL_LOCATION_UPDATES
Private-API android.telephony.TelephonyManager.enableLocationUpdates(int) : CONTROL_LOCATION_UPDATES
Private-API android.telephony.TelephonyManager.disableLocationUpdates() : CONTROL_LOCATION_UPDATES
Private-API android.telephony.TelephonyManager.getNetworkType(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getDataNetworkType() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getDataNetworkType(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getVoiceNetworkType() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getVoiceNetworkType(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getSimSerialNumber() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getSimSerialNumber(int) : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getLteOnCdmaMode() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getLteOnCdmaMode(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getSubscriberId() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getSubscriberId(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getGroupIdLevel1() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getGroupIdLevel1(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getLine1Number() : READ_SMS, READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getLine1Number(int) : READ_SMS, READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getLine1AlphaTag() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getLine1AlphaTag(int) : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getMsisdn() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getMsisdn(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getVoiceMailNumber() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getVoiceMailNumber(int) : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCompleteVoiceMailNumber() : CALL_PRIVILEGED
Private-API android.telephony.TelephonyManager.getCompleteVoiceMailNumber(int) : CALL_PRIVILEGED
Private-API android.telephony.TelephonyManager.getVoiceMessageCount() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getVoiceMessageCount(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getVoiceMailAlphaTag() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getVoiceMailAlphaTag(int) : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCdmaEriIconIndex() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCdmaEriIconIndex(int) : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCdmaEriIconMode() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCdmaEriIconMode(int) : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCdmaEriText() : READ_PHONE_STATE
Private-API android.telephony.TelephonyManager.getCdmaEriText(int) : READ_PHONE_STATE
Public-API android.telephony.TelephonyManager.getAllCellInfo() : ACCESS_COARSE_LOCATION
Public-API android.telephony.TelephonyManager.iccOpenLogicalChannel(java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.iccOpenLogicalChannel(int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager.iccCloseLogicalChannel(int) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.iccCloseLogicalChannel(int, int) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int, int, int, int, int, int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.iccTransmitApduLogicalChannel(int, int, int, int, int, int, int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int, int, int, int, int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.iccTransmitApduBasicChannel(int, int, int, int, int, int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager.iccExchangeSimIO(int, int, int, int, int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.iccExchangeSimIO(int, int, int, int, int, int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager.sendEnvelopeWithStatus(java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.sendEnvelopeWithStatus(int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.nvReadItem(int) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.nvWriteItem(int, java.lang.String) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.nvWriteCdmaPrl(byte[]) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.nvResetConfig(int) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telephony.TelephonyManager.getIccAuthentication(int, int, java.lang.String) : READ_PRIVILEGED_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.getPreferredNetworkType(int) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.setNetworkSelectionModeAutomatic(int) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.getCellNetworkScanResults(int) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.setNetworkSelectionModeManual(int, com.android.internal.telephony.OperatorInfo, boolean) : MODIFY_PHONE_STATE, carrier privileges
Private-API android.telephony.TelephonyManager.setPreferredNetworkType(int, int) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.telecom.TelecomManager.getDefaultOutgoingPhoneAccount(java.lang.String) : READ_PHONE_STATE
Public-API android.telecom.TelecomManager.getCallCapablePhoneAccounts() : READ_PHONE_STATE
Private-API android.telecom.TelecomManager.setDefaultDialer(java.lang.String) : MODIFY_PHONE_STATE, WRITE_SECURE_SETTINGS
Public-API android.telecom.TelecomManager.isVoiceMailNumber(android.telecom.PhoneAccountHandle, java.lang.String) : READ_PHONE_STATE
Public-API android.telecom.TelecomManager.getVoiceMailNumber(android.telecom.PhoneAccountHandle) : READ_PHONE_STATE
Public-API android.telecom.TelecomManager.getLine1Number(android.telecom.PhoneAccountHandle) : READ_PHONE_STATE
Public-API android.telecom.TelecomManager.isInCall() : READ_PHONE_STATE
Private-API android.telecom.TelecomManager.getCallState() : READ_PHONE_STATE
Public-API android.telecom.TelecomManager.silenceRinger() : MODIFY_PHONE_STATE
Public-API android.telecom.TelecomManager.handleMmi(java.lang.String) : MODIFY_PHONE_STATE
Public-API android.telecom.TelecomManager.handleMmi(java.lang.String, android.telecom.PhoneAccountHandle) : MODIFY_PHONE_STATE
Public-API android.telecom.TelecomManager.getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle) : MODIFY_PHONE_STATE
Public-API android.telecom.TelecomManager.cancelMissedCallsNotification() : MODIFY_PHONE_STATE
Public-API android.telecom.TelecomManager.showInCallScreen(boolean) : READ_PHONE_STATE
Public-API android.telecom.TelecomManager.placeCall(android.net.Uri, android.os.Bundle) : CALL_PHONE
Private-API android.telecom.TelecomManager.dumpAnalytics() : DUMP
Public-API android.accounts.AccountManager.getPassword(android.accounts.Account) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.getUserData(android.accounts.Account, java.lang.String) : AUTHENTICATE_ACCOUNTS
Private-API android.accounts.AccountManager.getAuthenticatorTypesAsUser(int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.accounts.AccountManager.getAccounts() : GET_ACCOUNTS
Private-API android.accounts.AccountManager.getAccountsAsUser(int) : GET_ACCOUNTS
Public-API android.accounts.AccountManager.getAccountsByType(java.lang.String) : GET_ACCOUNTS
Public-API android.accounts.AccountManager.hasFeatures(android.accounts.Account, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler) : GET_ACCOUNTS
Public-API android.accounts.AccountManager.getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler) : GET_ACCOUNTS
Public-API android.accounts.AccountManager.addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.renameAccount(android.accounts.Account, java.lang.String, android.accounts.AccountManagerCallback, android.os.Handler) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.removeAccount(android.accounts.Account, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.removeAccount(android.accounts.Account, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.removeAccountExplicitly(android.accounts.Account) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.invalidateAuthToken(java.lang.String, java.lang.String) : MANAGE_ACCOUNTS, USE_CREDENTIALS
Public-API android.accounts.AccountManager.peekAuthToken(android.accounts.Account, java.lang.String) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.setPassword(android.accounts.Account, java.lang.String) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.clearPassword(android.accounts.Account) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.setUserData(android.accounts.Account, java.lang.String, java.lang.String) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.setAuthToken(android.accounts.Account, java.lang.String, java.lang.String) : AUTHENTICATE_ACCOUNTS
Public-API android.accounts.AccountManager.blockingGetAuthToken(android.accounts.Account, java.lang.String, boolean) : USE_CREDENTIALS
Public-API android.accounts.AccountManager.getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) : USE_CREDENTIALS
Public-API android.accounts.AccountManager.getAuthToken(android.accounts.Account, java.lang.String, android.os.Bundle, boolean, android.accounts.AccountManagerCallback, android.os.Handler) : USE_CREDENTIALS
Public-API android.accounts.AccountManager.addAccount(java.lang.String, java.lang.String, java.lang.String[], android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.confirmCredentials(android.accounts.Account, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.updateCredentials(android.accounts.Account, java.lang.String, android.os.Bundle, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.editProperties(java.lang.String, android.app.Activity, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.getAuthTokenByFeatures(java.lang.String, java.lang.String, java.lang.String[], android.app.Activity, android.os.Bundle, android.os.Bundle, android.accounts.AccountManagerCallback, android.os.Handler) : MANAGE_ACCOUNTS
Public-API android.accounts.AccountManager.addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean) : GET_ACCOUNTS
Private-API android.appwidget.AppWidgetManager.bindAppWidgetId(int, android.content.ComponentName) : BIND_APPWIDGET
Private-API android.appwidget.AppWidgetManager.bindAppWidgetId(int, android.content.ComponentName, android.os.Bundle) : BIND_APPWIDGET
Public-API android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, android.content.ComponentName) : BIND_APPWIDGET
Public-API android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, android.content.ComponentName, android.os.Bundle) : BIND_APPWIDGET
Public-API android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed(int, android.os.UserHandle, android.content.ComponentName, android.os.Bundle) : BIND_APPWIDGET
Private-API android.appwidget.AppWidgetManager.hasBindAppWidgetPermission(java.lang.String, int) : MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.appwidget.AppWidgetManager.hasBindAppWidgetPermission(java.lang.String) : MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.appwidget.AppWidgetManager.setBindAppWidgetPermission(java.lang.String, boolean) : MODIFY_APPWIDGET_BIND_PERMISSIONS
Private-API android.appwidget.AppWidgetManager.setBindAppWidgetPermission(java.lang.String, int, boolean) : MODIFY_APPWIDGET_BIND_PERMISSIONS
Public-API android.support.v4.app.Fragment.requestPermissions(java.lang.String[], int) : READ_CONTACTS
Public-API android.support.v4.content.ContextCompat.getObbDirs(android.content.Context) : WRITE_EXTERNAL_STORAGE
Public-API android.support.v4.content.ContextCompat.getExternalFilesDirs(android.content.Context, java.lang.String) : WRITE_EXTERNAL_STORAGE
Public-API android.support.v4.content.ContextCompat.getExternalCacheDirs(android.content.Context) : WRITE_EXTERNAL_STORAGE
Public-API android.nfc.NfcAdapter.setBeamPushUris(android.net.Uri[], android.app.Activity) : NFC
Public-API android.nfc.NfcAdapter.setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback, android.app.Activity) : NFC
Public-API android.nfc.NfcAdapter.setNdefPushMessage(android.nfc.NdefMessage, android.app.Activity, android.app.Activity) : NFC
Public-API android.nfc.NfcAdapter.setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback, android.app.Activity, android.app.Activity) : NFC
Public-API android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback, android.app.Activity, android.app.Activity) : NFC
Public-API android.nfc.NfcAdapter.enableForegroundDispatch(android.app.Activity, android.app.PendingIntent, android.content.IntentFilter[], java.lang.String[][]) : NFC
Public-API android.nfc.NfcAdapter.disableForegroundDispatch(android.app.Activity) : NFC
Public-API android.nfc.NfcAdapter.enableForegroundNdefPush(android.app.Activity, android.nfc.NdefMessage) : NFC
Public-API android.nfc.NfcAdapter.disableForegroundNdefPush(android.app.Activity) : NFC
Private-API android.nfc.NfcAdapter.dispatch(android.nfc.Tag) : NFC, WRITE_SECURE_SETTINGS
Public-API android.nfc.cardemulation.CardEmulation.isDefaultServiceForCategory(android.content.ComponentName, java.lang.String) : NFC
Public-API android.nfc.cardemulation.CardEmulation.isDefaultServiceForAid(android.content.ComponentName, java.lang.String) : NFC
Public-API android.nfc.tech.NfcA.transceive(byte[]) : NFC
Public-API android.nfc.tech.NfcA.setTimeout(int) : NFC
Public-API android.nfc.tech.NfcA.getTimeout() : NFC
Public-API android.nfc.tech.MifareUltralight.readPages(int) : NFC
Public-API android.nfc.tech.MifareUltralight.writePage(int, byte[]) : NFC
Public-API android.nfc.tech.MifareUltralight.transceive(byte[]) : NFC
Public-API android.nfc.tech.MifareUltralight.setTimeout(int) : NFC
Public-API android.nfc.tech.MifareUltralight.getTimeout() : NFC
Public-API android.nfc.tech.NdefFormatable.format(android.nfc.NdefMessage) : NFC
Public-API android.nfc.tech.NdefFormatable.formatReadOnly(android.nfc.NdefMessage) : NFC
Public-API android.nfc.tech.NfcF.transceive(byte[]) : NFC
Public-API android.nfc.tech.NfcF.setTimeout(int) : NFC
Public-API android.nfc.tech.NfcF.getTimeout() : NFC
Public-API android.nfc.tech.IsoDep.setTimeout(int) : NFC
Public-API android.nfc.tech.IsoDep.getTimeout() : NFC
Public-API android.nfc.tech.IsoDep.transceive(byte[]) : NFC
Public-API android.nfc.tech.Ndef.isWritable() : NFC
Public-API android.nfc.tech.Ndef.getNdefMessage() : NFC
Public-API android.nfc.tech.Ndef.writeNdefMessage(android.nfc.NdefMessage) : NFC
Public-API android.nfc.tech.Ndef.makeReadOnly() : NFC
Public-API android.nfc.tech.NfcV.transceive(byte[]) : NFC
Public-API android.nfc.tech.NfcB.transceive(byte[]) : NFC
Public-API android.nfc.tech.MifareClassic.authenticateSectorWithKeyA(int, byte[]) : NFC
Public-API android.nfc.tech.MifareClassic.authenticateSectorWithKeyB(int, byte[]) : NFC
Public-API android.nfc.tech.MifareClassic.readBlock(int) : NFC
Public-API android.nfc.tech.MifareClassic.writeBlock(int, byte[]) : NFC
Public-API android.nfc.tech.MifareClassic.increment(int, int) : NFC
Public-API android.nfc.tech.MifareClassic.decrement(int, int) : NFC
Public-API android.nfc.tech.MifareClassic.transfer(int) : NFC
Public-API android.nfc.tech.MifareClassic.restore(int) : NFC
Public-API android.nfc.tech.MifareClassic.transceive(byte[]) : NFC
Public-API android.nfc.tech.MifareClassic.setTimeout(int) : NFC
Public-API android.nfc.tech.MifareClassic.getTimeout() : NFC
Public-API android.bluetooth.BluetoothGatt.registerApp(android.bluetooth.BluetoothGattCallback) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.connect(java.lang.Boolean, android.bluetooth.BluetoothGattCallback) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.disconnect() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.discoverServices() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.getServices() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.getService(java.util.UUID) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.readCharacteristic(android.bluetooth.BluetoothGattCharacteristic) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.readDescriptor(android.bluetooth.BluetoothGattDescriptor) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.writeDescriptor(android.bluetooth.BluetoothGattDescriptor) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.beginReliableWrite() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.executeReliableWrite() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.abortReliableWrite() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic, boolean) : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.readRemoteRssi() : BLUETOOTH
Public-API android.bluetooth.BluetoothGatt.requestMtu(int) : BLUETOOTH
Private-API android.bluetooth.BluetoothA2dpSink.connect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dpSink.disconnect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dpSink.getAudioConfig(android.bluetooth.BluetoothDevice) : BLUETOOTH
Private-API android.bluetooth.BluetoothA2dpSink.setPriority(android.bluetooth.BluetoothDevice, int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dpSink.getPriority(android.bluetooth.BluetoothDevice) : BLUETOOTH
Private-API android.bluetooth.BluetoothA2dpSink.isA2dpPlaying(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattCharacteristic.BluetoothGattCharacteristic(java.util.UUID, int, int) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattCharacteristic.addDescriptor(android.bluetooth.BluetoothGattDescriptor) : BLUETOOTH
Private-API android.bluetooth.BluetoothHeadset.connect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothHeadset.disconnect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice, int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothHeadset.getPriority(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset.startVoiceRecognition(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset.stopVoiceRecognition(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset.isAudioConnected(android.bluetooth.BluetoothDevice) : BLUETOOTH
Private-API android.bluetooth.BluetoothHeadset.isAudioOn() : BLUETOOTH
Public-API android.bluetooth.BluetoothHeadset.sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice, java.lang.String, java.lang.String) : BLUETOOTH
Private-API android.bluetooth.BluetoothA2dp.connect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dp.disconnect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dp.setPriority(android.bluetooth.BluetoothDevice, int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothA2dp.getPriority(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothA2dp.isA2dpPlaying(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.isEnabled() : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.getState() : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.getLeState() : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.enable() : BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.disable() : BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.disable(boolean) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothAdapter.getAddress() : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.getName() : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.configHciSnoopLog(boolean) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothAdapter.factoryReset() : BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothAdapter.getUuids() : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.setName(java.lang.String) : BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.getScanMode() : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.setScanMode(int, int) : WRITE_SECURE_SETTINGS
Public-API android.bluetooth.BluetoothAdapter.startDiscovery() : BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.cancelDiscovery() : BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.isDiscovering() : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.getBondedDevices() : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.getProfileConnectionState(int) : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothAdapter.listenUsingRfcommOn(int, boolean, boolean) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String, java.util.UUID) : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(java.lang.String, java.util.UUID) : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.listenUsingEncryptedRfcommWithServiceRecord(java.lang.String, java.util.UUID) : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.readOutOfBandData() : BLUETOOTH
Private-API android.bluetooth.BluetoothAdapter.changeApplicationBluetoothState(boolean, android.bluetooth.BluetoothAdapter$BluetoothStateChangeCallback) : BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) : BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.startLeScan(java.util.UUID[], android.bluetooth.BluetoothAdapter$LeScanCallback) : BLUETOOTH_ADMIN, BLUETOOTH
Public-API android.bluetooth.BluetoothAdapter.stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback) : BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothPan.connect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothPan.disconnect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothGattServer.registerCallback(android.bluetooth.BluetoothGattServerCallback) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.connect(android.bluetooth.BluetoothDevice, boolean) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.cancelConnection(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.sendResponse(android.bluetooth.BluetoothDevice, int, int, int, byte[]) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.notifyCharacteristicChanged(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothGattCharacteristic, boolean) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.addService(android.bluetooth.BluetoothGattService) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.removeService(android.bluetooth.BluetoothGattService) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.clearServices() : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.getServices() : BLUETOOTH
Public-API android.bluetooth.BluetoothGattServer.getService(java.util.UUID) : BLUETOOTH
Private-API android.bluetooth.BluetoothInputDevice.connect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.disconnect(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.setPriority(android.bluetooth.BluetoothDevice, int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.getPriority(android.bluetooth.BluetoothDevice) : BLUETOOTH
Private-API android.bluetooth.BluetoothInputDevice.virtualUnplug(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.getProtocolMode(android.bluetooth.BluetoothDevice) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.setProtocolMode(android.bluetooth.BluetoothDevice, int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.getReport(android.bluetooth.BluetoothDevice, byte, byte, int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.setReport(android.bluetooth.BluetoothDevice, byte, java.lang.String) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothInputDevice.sendData(android.bluetooth.BluetoothDevice, java.lang.String) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothManager.getConnectionState(android.bluetooth.BluetoothDevice, int) : BLUETOOTH
Public-API android.bluetooth.BluetoothManager.getConnectedDevices(int) : BLUETOOTH
Public-API android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates(int, int[]) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.registerSinkAppConfiguration(java.lang.String, int, android.bluetooth.BluetoothHealthCallback) : BLUETOOTH
Private-API android.bluetooth.BluetoothHealth.registerAppConfiguration(java.lang.String, int, int, int, android.bluetooth.BluetoothHealthCallback) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.connectChannelToSource(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration) : BLUETOOTH
Private-API android.bluetooth.BluetoothHealth.connectChannelToSink(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.disconnectChannel(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.getMainChannelFd(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.getConnectionState(android.bluetooth.BluetoothDevice) : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.getConnectedDevices() : BLUETOOTH
Public-API android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates(int[]) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(java.util.UUID, int) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattDescriptor.BluetoothGattDescriptor(android.bluetooth.BluetoothGattCharacteristic, java.util.UUID, int, int) : BLUETOOTH
Private-API android.bluetooth.BluetoothGattDescriptor.getInstanceId() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.getName() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.getType() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.createBond() : BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.createBond(int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice.createBondOutOfBand(int, android.bluetooth.OobData) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice.setDeviceOutOfBandData(byte[], byte[]) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice.cancelBondProcess() : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice.removeBond() : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothDevice.getBondState() : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.isConnected() : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.isEncrypted() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.getBluetoothClass() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.getUuids() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.fetchUuidsWithSdp() : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.setPin(byte[]) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean) : BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.getPhonebookAccessPermission() : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.setPhonebookAccessPermission(int) : BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothDevice.getMessageAccessPermission() : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.setMessageAccessPermission(int) : BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothDevice.getSimAccessPermission() : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.setSimAccessPermission(int) : BLUETOOTH, BLUETOOTH_PRIVILEGED
Private-API android.bluetooth.BluetoothDevice.createRfcommSocket(int) : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.createL2capSocket(int) : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID) : BLUETOOTH
Public-API android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(java.util.UUID) : BLUETOOTH
Private-API android.bluetooth.BluetoothDevice.createInsecureRfcommSocket(int) : BLUETOOTH, BLUETOOTH_ADMIN
Private-API android.bluetooth.BluetoothDevice.createScoSocket() : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.BluetoothGattService.BluetoothGattService(java.util.UUID, int) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattService.addService(android.bluetooth.BluetoothGattService) : BLUETOOTH
Public-API android.bluetooth.BluetoothGattService.addCharacteristic(android.bluetooth.BluetoothGattCharacteristic) : BLUETOOTH
Public-API android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeAdvertiser.startAdvertising(android.bluetooth.le.AdvertiseSettings, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseData, android.bluetooth.le.AdvertiseCallback) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeAdvertiser.stopAdvertising(android.bluetooth.le.AdvertiseCallback) : BLUETOOTH, BLUETOOTH_ADMIN
Public-API android.bluetooth.le.BluetoothLeScanner.startScan(android.bluetooth.le.ScanCallback) : BLUETOOTH_ADMIN, ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION, BLUETOOTH
Public-API android.bluetooth.le.BluetoothLeScanner.startScan(java.util.List, android.bluetooth.le.ScanSettings, android.bluetooth.le.ScanCallback) : BLUETOOTH_ADMIN, ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION, BLUETOOTH
Private-API android.bluetooth.le.BluetoothLeScanner.startScanFromSource(android.os.WorkSource, android.bluetooth.le.ScanCallback) : BLUETOOTH_ADMIN, UPDATE_DEVICE_STATS
Private-API android.bluetooth.le.BluetoothLeScanner.startScanFromSource(java.util.List, android.bluetooth.le.ScanSettings, android.os.WorkSource, android.bluetooth.le.ScanCallback) : BLUETOOTH_ADMIN, UPDATE_DEVICE_STATS
Public-API android.bluetooth.le.BluetoothLeScanner.stopScan(android.bluetooth.le.ScanCallback) : BLUETOOTH_ADMIN, BLUETOOTH
Private-API android.view.Display.requestColorTransform(android.view.Display$ColorTransform) : CONFIGURE_DISPLAY_COLOR_TRANSFORM
Public-API android.view.inputmethod.InputMethodManager.setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype) : WRITE_SECURE_SETTINGS
Public-API android.os.DropBoxManager.getNextEntry(java.lang.String, long) : READ_LOGS
Public-API android.os.Vibrator.vibrate(long) : VIBRATE
Public-API android.os.Vibrator.vibrate(long, android.media.AudioAttributes) : VIBRATE
Public-API android.os.Vibrator.vibrate(long[], int) : VIBRATE
Public-API android.os.Vibrator.vibrate(long[], int, android.media.AudioAttributes) : VIBRATE
Public-API android.os.Vibrator.cancel() : VIBRATE
Public-API android.os.Environment.getExternalStorageDirectory() : READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Private-API android.os.Environment.maybeTranslateEmulatedPathToInternal(java.io.File) : WRITE_MEDIA_STORAGE
Public-API android.os.RecoverySystem.installPackage(android.content.Context, java.io.File) : REBOOT
Public-API android.os.RecoverySystem.rebootWipeUserData(android.content.Context) : REBOOT
Private-API android.os.RecoverySystem.rebootWipeUserData(android.content.Context, boolean, java.lang.String) : REBOOT
Public-API android.os.UserManager.getUserName() : MANAGE_USERS
Private-API android.os.UserManager.isManagedProfile() : MANAGE_USERS
Private-API android.os.UserManager.isManagedProfile(int) : MANAGE_USERS
Private-API android.os.UserManager.getUserInfo(int) : MANAGE_USERS
Private-API android.os.UserManager.getUserRestrictionSource(java.lang.String, android.os.UserHandle) : MANAGE_USERS
Public-API android.os.UserManager.setUserRestriction(java.lang.String, boolean) : MANAGE_USERS
Private-API android.os.UserManager.setUserRestriction(java.lang.String, boolean, android.os.UserHandle) : MANAGE_USERS
Private-API android.os.UserManager.createUser(java.lang.String, int) : MANAGE_USERS
Private-API android.os.UserManager.createProfileForUser(java.lang.String, int, int) : MANAGE_USERS
Private-API android.os.UserManager.getSeedAccountName() : MANAGE_USERS
Private-API android.os.UserManager.getSeedAccountType() : MANAGE_USERS
Private-API android.os.UserManager.getSeedAccountOptions() : MANAGE_USERS
Private-API android.os.UserManager.clearSeedAccountData() : MANAGE_USERS
Private-API android.os.UserManager.setUserEnabled(int) : MANAGE_USERS
Private-API android.os.UserManager.getUsers() : MANAGE_USERS
Private-API android.os.UserManager.getSerialNumbersOfUsers(boolean) : MANAGE_USERS
Private-API android.os.UserManager.getUserAccount(int) : INTERACT_ACROSS_USERS_FULL, MANAGE_USERS
Private-API android.os.UserManager.setUserAccount(int, java.lang.String) : INTERACT_ACROSS_USERS_FULL, MANAGE_USERS
Private-API android.os.UserManager.getPrimaryUser() : MANAGE_USERS
Private-API android.os.UserManager.canAddMoreUsers() : MANAGE_USERS
Private-API android.os.UserManager.canAddMoreManagedProfiles(int, boolean) : MANAGE_USERS
Private-API android.os.UserManager.getProfiles(int) : MANAGE_USERS
Private-API android.os.UserManager.isSameProfileGroup(int, int) : MANAGE_USERS
Private-API android.os.UserManager.getEnabledProfiles(int) : MANAGE_USERS
Private-API android.os.UserManager.getUsers(boolean) : MANAGE_USERS
Private-API android.os.UserManager.removeUser(int) : MANAGE_USERS
Private-API android.os.UserManager.setUserName(int, java.lang.String) : MANAGE_USERS
Public-API android.os.UserManager.setRestrictionsChallenge(java.lang.String) : MANAGE_USERS
Public-API android.os.Debug.dumpService(java.lang.String, java.io.FileDescriptor, java.lang.String[]) : DUMP
Public-API android.os.PowerManager.newWakeLock(int, java.lang.String) : WAKE_LOCK
Public-API android.os.PowerManager.userActivity(long, boolean) : DEVICE_POWER
Private-API android.os.PowerManager.userActivity(long, int, int) : DEVICE_POWER, USER_ACTIVITY
Public-API android.os.PowerManager.goToSleep(long) : DEVICE_POWER
Private-API android.os.PowerManager.goToSleep(long, int, int) : DEVICE_POWER
Public-API android.os.PowerManager.wakeUp(long) : DEVICE_POWER
Private-API android.os.PowerManager.nap(long) : DEVICE_POWER
Private-API android.os.PowerManager.boostScreenBrightness(long) : DEVICE_POWER
Private-API android.os.PowerManager.setBacklightBrightness(int) : DEVICE_POWER
Public-API android.os.PowerManager.reboot(java.lang.String) : REBOOT
Private-API android.os.PowerManager.rebootSafeMode() : REBOOT
Public-API android.os.health.SystemHealthManager.takeUidSnapshot(int) : BATTERY_STATS
Public-API android.os.health.SystemHealthManager.takeUidSnapshots(int[]) : BATTERY_STATS
Public-API android.os.storage.StorageVolume.createAccessIntent(java.lang.String) : READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE
Private-API android.os.storage.VolumeInfo.getInternalPathForUser(int) : WRITE_MEDIA_STORAGE
Public-API android.service.carrier.CarrierService.notifyCarrierNetworkChange(boolean) : MODIFY_PHONE_STATE, carrier privileges
Public-API android.media.RingtoneManager.getCursor() : READ_EXTERNAL_STORAGE
Public-API android.media.RingtoneManager.getValidRingtoneUri(android.content.Context) : READ_EXTERNAL_STORAGE
Public-API android.media.RingtoneManager.openRingtone(android.content.Context, android.net.Uri) : READ_EXTERNAL_STORAGE
Private-API android.media.AsyncPlayer.setUsesWakeLock(android.content.Context) : WAKE_LOCK
Public-API android.media.MediaPlayer.setWakeMode(android.content.Context, int) : WAKE_LOCK
Public-API android.media.AudioManager.startBluetoothSco() : MODIFY_AUDIO_SETTINGS
Private-API android.media.AudioManager.startBluetoothScoVirtualCall() : MODIFY_AUDIO_SETTINGS
Public-API android.media.AudioManager.stopBluetoothSco() : MODIFY_AUDIO_SETTINGS
Private-API android.media.AudioManager.registerAudioPolicy(android.media.audiopolicy.AudioPolicy) : MODIFY_AUDIO_ROUTING
Private-API android.media.tv.TvView.unblockContent(android.media.tv.TvContentRating) : MODIFY_PARENTAL_CONTROLS
Private-API android.media.tv.TvInputManager.setParentalControlsEnabled(boolean) : MODIFY_PARENTAL_CONTROLS
Private-API android.media.tv.TvInputManager.addBlockedRating(android.media.tv.TvContentRating) : MODIFY_PARENTAL_CONTROLS
Private-API android.media.tv.TvInputManager.removeBlockedRating(android.media.tv.TvContentRating) : MODIFY_PARENTAL_CONTROLS
Private-API android.media.tv.TvInputManager.getHardwareList() : TV_INPUT_HARDWARE
Public-API android.media.tv.TvInputManager.acquireTvInputHardware(int, android.media.tv.TvInputManager$HardwareCallback, android.media.tv.TvInputInfo) : TV_INPUT_HARDWARE
Private-API android.media.tv.TvInputManager.acquireTvInputHardware(int, android.media.tv.TvInputInfo, android.media.tv.TvInputManager$HardwareCallback) : TV_INPUT_HARDWARE
Private-API android.media.tv.TvInputManager.releaseTvInputHardware(int, android.media.tv.TvInputManager$Hardware) : TV_INPUT_HARDWARE
Private-API android.media.projection.MediaProjectionManager.addCallback(android.media.projection.MediaProjectionManager$Callback, android.os.Handler) : MANAGE_MEDIA_PROJECTION
Public-API android.media.session.MediaSessionManager.getActiveSessions(android.content.ComponentName) : MEDIA_CONTENT_CONTROL
Private-API android.media.session.MediaSessionManager.getActiveSessionsForUser(android.content.ComponentName, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName) : MEDIA_CONTENT_CONTROL
Public-API android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, android.os.Handler) : MEDIA_CONTENT_CONTROL
Private-API android.media.session.MediaSessionManager.addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, int, android.os.Handler) : MEDIA_CONTENT_CONTROL
Private-API android.media.session.MediaSession.MediaSession(android.content.Context, java.lang.String, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API com.android.location.provider.LocationProviderBase.reportLocation(android.location.Location) : INSTALL_LOCATION_PROVIDER
Public-API com.android.internal.widget.LockPatternUtils.requireCredentialEntry(int) : ACCESS_KEYGUARD_SECURE_STORAGE
Public-API com.android.internal.widget.LockPatternUtils.requireStrongAuth(int, int) : ACCESS_KEYGUARD_SECURE_STORAGE
Public-API com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfBySearch(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) : WRITE_CONTACTS
Public-API com.android.internal.telephony.IccPhoneBookInterfaceManager.updateAdnRecordsInEfByIndex(int, java.lang.String, java.lang.String, int, java.lang.String) : WRITE_CONTACTS
Public-API com.android.internal.telephony.IccPhoneBookInterfaceManager.getAdnRecordsInEf(int) : READ_CONTACTS
Public-API com.android.internal.telephony.SubscriptionController.canReadPhoneState(java.lang.String, java.lang.String) : READ_PHONE_STATE
Private-API com.android.internal.telephony.CallerInfo.markAsVoiceMail() : READ_PHONE_STATE
Private-API com.android.internal.telephony.SmsApplication.getApplicationCollection(android.content.Context) : SEND_RESPOND_VIA_MESSAGE, BROADCAST_SMS, BROADCAST_WAP_PUSH
Private-API com.android.internal.telephony.SmsApplication.assignWriteSmsPermissionToSystemApp(android.content.Context, android.content.pm.PackageManager, android.app.AppOpsManager, java.lang.String) : WRITE_SMS
Private-API com.android.internal.telephony.CarrierAppUtils.getDefaultCarrierAppCandidates(android.content.pm.IPackageManager, int) : carrier privileges
Private-API com.android.server.ConnectivityService.prepareVpn(java.lang.String, java.lang.String, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.ConnectivityService.setVpnPackageAuthorization(java.lang.String, int, boolean) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API com.android.server.pm.PackageManagerService.enforceCrossUserPermission(int, int, boolean, boolean, java.lang.String) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.pm.UserManagerService.getUserRestrictionSource(java.lang.String, int) : MANAGE_USERS
Public-API com.android.server.pm.UserManagerService.checkManageUserAndAcrossUsersFullPermission(java.lang.String) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL, MANAGE_USERS
Public-API com.android.server.pm.UserManagerService.checkManageUsersPermission(java.lang.String) : MANAGE_USERS
Public-API com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(java.lang.String) : MANAGE_USERS, CREATE_USERS
Public-API com.android.server.pm.UserManagerService.checkManageOrCreateUsersPermission(int) : MANAGE_USERS, CREATE_USERS
Public-API com.android.server.pm.UserManagerService.hasManageUsersPermission() : MANAGE_USERS
Public-API com.android.server.pm.UserManagerService.hasManageOrCreateUsersPermission() : MANAGE_USERS, CREATE_USERS
Private-API com.android.server.wifi.WifiServiceImpl.checkCallerCanAccessScanResults(java.lang.String, int) : ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION
Public-API com.android.server.net.NetworkPolicyManagerService.hasInternetPermissions(int) : INTERNET
Public-API com.android.server.fingerprint.ClientMonitor.ClientMonitor(android.content.Context, long, android.os.IBinder, android.hardware.fingerprint.IFingerprintServiceReceiver, int, int, boolean, java.lang.String) : MANAGE_FINGERPRINT
Private-API com.android.server.connectivity.Vpn.setAlwaysOnPackage(java.lang.String, boolean) : BIND_VPN_SERVICE
Public-API com.android.server.devicepolicy.DevicePolicyManagerService.enforceCanSetProfileOwnerLocked(int) : MANAGE_PROFILE_AND_DEVICE_OWNERS
Public-API com.android.server.devicepolicy.DevicePolicyManagerService.enforceCanSetDeviceOwnerLocked(int) : MANAGE_PROFILE_AND_DEVICE_OWNERS
Private-API com.android.server.content.ContentService.registerContentObserver(android.net.Uri, boolean, android.database.IContentObserver, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.notifyChange(android.net.Uri, android.database.IContentObserver, boolean, int, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.syncAsUser(android.content.SyncRequest, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.cancelSyncAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.getSyncAdapterTypesAsUser(int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.getSyncAutomaticallyAsUser(android.accounts.Account, java.lang.String, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.getIsSyncableAsUser(android.accounts.Account, java.lang.String, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.getMasterSyncAutomaticallyAsUser(int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.getCurrentSyncsAsUser(int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.getSyncStatusAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Private-API com.android.server.content.ContentService.enforceCrossUserPermission(int, java.lang.String) : INTERACT_ACROSS_USERS, INTERACT_ACROSS_USERS_FULL
Public-API com.android.server.media.MediaSessionService.enforceMediaPermissions(android.content.ComponentName, int, int, int) : MEDIA_CONTENT_CONTROL
Private-API com.android.systemui.media.NotificationPlayer.setUsesWakeLock(android.content.Context) : WAKE_LOCK
Public-API com.android.nfc_extras.NfcExecutionEnvironment.open() : NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcExecutionEnvironment.close() : NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcExecutionEnvironment.transceive(byte[]) : NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras.get(android.nfc.NfcAdapter) : WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras.getCardEmulationRoute() : NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras.setCardEmulationRoute(com.android.nfc_extras.NfcAdapterExtras$CardEmulationRoute) : NFC, WRITE_SECURE_SETTINGS
Public-API com.android.nfc_extras.NfcAdapterExtras.getEmbeddedExecutionEnvironment() : NFC, WRITE_SECURE_SETTINGS
